Given n pairs of parentheses, write a function to generate all combinations of well-formed parentheses.

For example, given n = 3, a solution set is:

"((()))", "(()())", "(())()", "()(())", "()()()"

1: ()             1
2: ()() (())      2
3: ()()() (())() ()(()) ((())) (()())  5

public class Solution {
    public List<String> generateParenthesis(int n) {
        
    }
}



other's solution:
List<String> list = new ArrayList<String>();
    public List<String> generateParenthesis(int n) {
        loop("(",n-1,1);
        return list;
    }
    private void loop(String s, int n, int o){
        if (n==0 && o==0) list.add(s);
        if (n>0) loop(s+"(", n-1, o+1);
        if (o>0) loop(s+")", n, o-1);
    }
    

public List<String> generateParenthesis(int n) {
    List<String> result = new LinkedList<>();
    result.add("()");
    for (int i = 1; i < n; ++i) {
        Set<String> buffer = new HashSet<>();
        for (int j = 0; j < result.size(); ++j) {
            String str = result.get(j);
            for (int k = 0; k < str.length(); ++k) {
                    buffer.add(str.substring(0, k) + "()" + str.substring(k, str.length()));
            }
        }
        result.clear();
        result.addAll(buffer);
    }
    return result;

