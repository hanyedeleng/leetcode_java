There are a total of n courses you have to take, labeled from 0 to n - 1.
Some courses may have prerequisites, for example to take course 0 you have to first take
course 1, which is expressed as a pair: [0,1]

Given the total number of courses and a list of prerequisite pairs, return the ordering
of courses you should take to finish all courses.

There may be multiple correct orders, you just need to return one of them. If it is
impossible to finish all courses, return an empty array.

For example:
2, [[1,0]]
There are a total of 2 courses to take. To take course 1 you should have finished course
0. So the correct course order is [0,1]

4, [[1,0],[2,0],[3,1],[3,2]]
There are a total of 4 courses to take. To take course 3 you should have finished both
courses 1 and 2. Both courses 1 and 2 should be taken after you finished course 0. So one
correct course order is [0,1,2,3]. Another correct ordering is[0,2,1,3].

Note:
The input prerequisites is a graph represented by a list of edges, not adjacency matrices.
Read more about how a graph is represented.

click to show more hints.

Hints:
This problem is equivalent to finding the topological order in a directed graph. If a cycle 
exists, no topological ordering exists and therefore it will be impossible to take all
courses.
Topological Sort via DFS - A great video tutorial (21 minutes) on Coursera explaining the
basic concepts of Topological Sort.
Topological sort could also be done via BFS.

This question asks for an order in which prerequisite courses must be taken first. This
prerequisite relationship reminds one of directed graphs. Then, the problem reduces to find
a topological sort order of the courses, which would be a DAG if it has a valid order.}

public int[] findOrder(int numCourses, int[][] prerequisites) {
    int[] incLinkCounts = new int[numCourses];
    List<List<Integer>> adjs = new ArrayList<>(numCourses);
    initialiseGraph(incLinkCounts, adjs, prerequisites);
    //return solveByBFS(incLinkCounts, adjs);
    return solveByDFS(adjs);
}
The first step is to transform it into a directed graph. Since it is likely to be sparse,
we use adjacency list graph data structure. 1 -> 2 means 1 must be taken before 2.

private void initialiseGraph(int[] incLinkCounts, List<List<Integer>> adjs,
                               int[][] prerequisites){
    int n = incLinkCounts.length;
    while (n-- > 0) adjs.add(new ArrayList<>());
    for (int[] edge : prerequisites) {
        incLinkCounts[edge[0]]++;
        adjs.get(edge[1]).add(edge[0]);
    }
}
How can we obtain a topological sort order of a DAG?
We observe that if a node has incoming edges, it has prerequisites. Therefore, the first
few in the order must be those with no prerequisites, i.e. no incoming edges. Any non-empty
DAG must have at least one node without incoming links. You can draw a small graph to
convince yourself. If we visit these few and remove all edges attached to them, we are left
with a smaller DAG, which is the same problem. This will then give our BFS solution.}

private int[] solveByBFS(int[] incLinkCounts, List<List<Integer>> adjs){
    int[] order = new int[incLinkCounts.length];
    Queue<Integer> toVisit = new ArrayDeque<>();
    for (int i = 0; i < incLinkCounts.length; i++) {
        if (incLinkCounts[i] == 0) toVisit.offer(i);
    }
    int visited = 0;
    while (!toVisit.isEmpty()) {
        int from = toVisit.poll();
        order[visited++] = from;
        for (int to : adjs.get(from)) {
            incLinkCounts[to]--;
            if (incLinkCounts[to] == 0) toVisit.offer(to);
        }
    }
    return visited == incLinkCounts.length ? order : new int[0]; 
}
Another way to think about it is the last few in the order must be those which are not
prerequisites of other courses. Thinking it recursively means if one node has unvisited
child node, you should visit them first before you put this node down in the final order
array. This sounds like the post-order of a DFS. Since we are putting nodes down in the
reverse order, we should reverse it back to correct ordering or use a stack.}

private int[] solveByDFS(List<List<Integer>> adjs) {
    BitSet hasCycle = new BitSet(1);
    BitSet visited = new BitSet(adjs.size());
    BitSet onStack = new BitSet(adjs.size());
    Deque<Integer> order = new ArrayDeque<>();
    for (int i = adjs.size() - 1; i >= 0; i--) {
        if (visited.get(i) == false && hasOrder(i, adjs, visited, onStack, order) == false) return new int[0];
    }
    int[] orderArray = new int[adjs.size()];
    for (int i = 0; !order.isEmpty(); i++) orderArray[i] = order.pop();
    return orderArray;
}

private boolean hasOrder(int from, List<List<Integer>> adjs, BitSet visited, BitSet onStack, Deque<Integer> order) {
    visited.set(from);
    onStack.set(from);
    for (int to : adjs.get(from)) {
        if (visited.get(to) == false) {
            if (hasOrder(to, adjs, visited, onStack, order) == false) return false;
        } else if (onStack.get(to) == true) {
            return false;
        }
    }
    onStack.clear(from);
    order.push(from);
    return true;
}

This problem is a classic graph topological sort problem. Each prerequisite has edges to the
courses that require it.

We define in degree as the number of edges into a node in the graph. What we do is we remove
the nodes that has in degree equals to 0, decrease the in degree of the nodes that require
the current node, and repeat, until we've removed all the nodes (the successful case), or
there's no node with in degree equals to 0 (the failed case).

So, we can do this using a priority queue, and make the in degree as the priority. Every
time we poll a node from the queue, and decrease the priorities of the children of the node.
If the polled node has in degree larger than 1, it means we failed. But since Java's
priority queue doesn't support convenient decrease key operation, we have to remove one
node and add it back, which causes bad performance.

Or we can use two pointers. We put the removed node in an array, and use a left pointer to
iterate through the array and decrease the in degrees of the nodes than require the current
node. And use a right pointer to add those nodes which have 0 in degree after the decreasing
operation. Repeat this until all nodes are added.
}
public class Solution {
    public int[] findOrder(int numCourses, int[][] prerequisites) {

        int[] inDeg = new int[numCourses];
        List<Integer>[] chl = new ArrayList[numCourses];

        for (int i = 0; i < numCourses; i++) {
            chl[i] = new ArrayList<Integer>();
        }

        int pre;
        int cour;

        for (int[] pair : prerequisites) {
            pre = pair[1];
            cour = pair[0];

            chl[pre].add(cour);
            inDeg[cour]++;
        }

        int[] res = new int[numCourses];
        int k = 0;

        for (int i = 0; i < numCourses; i++) {
            if (inDeg[i] == 0) {
                res[k++] = i;
            }
        }

        if (k == 0) {
            return new int[0];
        }

        int j = 0;
        List<Integer> tmp;

        while (k < numCourses) {
            tmp = chl[res[j++]];

            for (int id : tmp) {
                if (--inDeg[id] == 0) {
                    res[k++] = id;
                }
            }

            if (j == k) {
                return new int[0];
            }
        }

        return res;
    }
}
