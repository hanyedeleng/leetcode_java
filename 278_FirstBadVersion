You are a product manager and currently leading a team to develop a new product. Unfortunately, the latest version of
your product fails the quality check. Since each version is developed based on the previous version, all the versions after 
a bad version are also bad.

Suppose you have n versions [1, 2, ..., n] and you want to find out the first bad one, which causes all the following ones to be bad.

You are given an API bool isBadVersion(version) which will return whether version is bad. Implement a function to find the first bad 
version. You should minimize the number of calls to the API.


public class Solution extends VersionControl {
    public int firstBadVersion(int n) {
        if(n < 1) {
            return 0;
        }
        
        if(isBadVersion(1)) {
            return 1;
        }
        
        return badVersion(1, n);

    }
    
    public int badVersion(int low, int high) {
        if (low +1 >=high) {
            return high;
        }
        
        int m = low + (high-low)/2;
        if (isBadVersion(m)) {
            return badVersion(low, m);
        }else{
            return badVersion(m, high);
        }
    }
}

Myown version works. 
Binary search

other's solution:
public int firstBadVersion(int n) {

    if(n==0) {
        return 0;
    }

   return helper(n,1,n);
}


public int helper(int n, int start, int end) {

    if(start>=end) {
        return start;
    }
    int middle = start+(end-start)/2;

    if(isBadVersion(middle)) {
        return helper(n,start,middle);
    } else {
        return helper(n,middle+1,end);

    }
}

  public int firstBadVersion(int n) {
    int lo = 1, hi = n;
    while (lo < hi) {
        int med = lo + (hi -  lo)/2;
        if (isBadVersion(med)) {
            hi = med;
        } else {
            lo = med + 1;
        }
    }
    return lo;
}
