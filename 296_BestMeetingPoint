A group of two or more people wants to meet and minimize the total travel distance. 
You are given a 2D grid of values 0 or 1, where each 1 marks the home of someone in the group. 
The distance is calculated using Manhattan Distance, where distance(p1, p2) = |p2.x - p1.x| + |p2.y - p1.y|.
For example, given three people living at (0,0), (0,4), and (2,2):
1 - 0 - 0 - 0 - 1
|   |   |   |   |
0 - 0 - 0 - 0 - 0
|   |   |   |   |
0 - 0 - 1 - 0 - 0
The point (0,2) is an ideal meeting point, as the total travel
distance of 2+2+2=6 is minimal. So return 6.

Solution:
public class Solution {
    public int minTotalDistance(int[][] grid) {
    // find all the point 1. Then calculate each possible meeting point and give the best.
    
    int m = grid.length;
    int n = grid[0].length;
    ArrayList<Integer> home_index = new ArrayList<>();
    
    for (int i=0; i<m; i++) {
      for (int j=0; j<n; j++) {
        if (grid[i][j] == 1) {
          home_index.add(i);
          home_index.add(j);
        }
      }
    }
    
    //calculate distance
    int minDistance = Integer.MAX_VALUE;
    int[] result = int[2];
    for (int i=0; i<m; i++) {
      for (int j=0; j<n; j++) {
      int tmp = 0;
        for (int k=0; k<home_index.size()-1;k++) {
          tmp = tmp + (homt_index.get(k)-i + home_index.get(k+1)-j);
          if (tmp<minDistance) {
            int[0] = i;
            int[1] = j;
          }
        }
      }
    }
    return result;
  }
}

Other's solution:
public class Solution {
    public int minTotalDistance(int[][] grid) {
        List<Integer> ipos = new ArrayList<Integer>();
        List<Integer> jpos = new ArrayList<Integer>();
        // 统计出有哪些横纵坐标
        for(int i = 0; i < grid.length; i++){
            for(int j = 0; j < grid[0].length; j++){
                if(grid[i][j] == 1){
                    ipos.add(i);
                    jpos.add(j);
                }
            }
        }
        int sum = 0;
        // 计算纵坐标到纵坐标中点的距离，这里不需要排序，因为之前统计时是按照i的顺序
        for(Integer pos : ipos){
            sum += Math.abs(pos - ipos.get(ipos.size() / 2));
        }
        // 计算横坐标到横坐标中点的距离，这里需要排序，因为统计不是按照j的顺序
        Collections.sort(jpos);
        for(Integer pos : jpos){
            sum += Math.abs(pos - jpos.get(jpos.size() / 2));
        }
        return sum;
    }
}

http://www.chenguanghe.com/best-meeting-point/
public int minTotalDistance(int[][] grid) {
        ArrayList<Integer> r = new ArrayList<Integer>();
        ArrayList<Integer> l = new ArrayList<Integer>();
        for(int i = 0; i < grid.length; i++){
            for(int j = 0; j < grid[0].length; j++){
                if(grid[i][j] == 1)
                    r.add(i);
            }
        }
        for(int j = 0; j < grid[0].length; j++){
            for(int i = 0; i < grid.length; i++){
                if(grid[i][j] == 1)
                    l.add(j);
            }
        }
        return min(r)+min(l);
    }
    
    public int min(ArrayList<Integer> ary) {
        int i = 0;
        int j = ary.size()-1;
        int sum = 0;
        while(i < j){
            sum += (ary.get(j) -ary.get(i));
            i++;
            j--;
        }
        return sum;
    }
    
    

http://www.chenguanghe.com/best-meeting-point/
