Implement regular expression matching with support for '.' and '*'.

'.' Matches any single character.
'*' Matches zero or more of the preceding element.

The matching should cover the entire input string (not partial).

The function prototype should be:
bool isMatch(const char *s, const char *p)

Some examples:
isMatch("aa","a") → false
isMatch("aa","aa") → true
isMatch("aaa","aa") → false
isMatch("aa", "a*") → true
isMatch("aa", ".*") → true
isMatch("ab", ".*") → true
isMatch("aab", "c*a*b") → true


Solution:
public class Solution {
    public boolean isMatch(String s, String p) {
      if (s.length() == 0 && p.length() == 0) {
        return true;
      }
      
      // doesn't contain *.
      if (p.substring("*") == -1) {
        if (s.length() != p.length()) {
          return false;
        }
        int i = 0;
        while (i < s.length()) {
          if (!(s.charAt(i) == p.charAt(i) || p.charAt(i) == '.')) {
            return false;
          }
          i++;
        }
        return true;
      }
      
      // contains *
      char pre, cur;
      int i = 0;
      int j = 0;
      int lens = s.length();
      int lenp = p.length();
      if (lenp > lens) {
        return false;
      }
      while (i < lenp) {
        if (p.charAt(i) != '*') {
          if (!(p.charAt(i) == '.' || p.charAt(i) == s.charAt(j++))) {
            return false;
          }  
        }else {
          pre = p.charAt(i-1);
          cur = p.charAt(i);
          if (s.charAt(j) != p.charAt(i-1) {
            return false;
          }else {
            while (s.charAt(j) == pre) {
              j++;
            }
          }
        }
        i++;
      }
      if (j != s.length()) {
        return false;
      }
      return true;
    }
}


other's solution:
public class Solution {
    public boolean isMatch(String s, String p) {
        for(int i = 0; i < p.length(); s = s.substring(1)) {
            char c = p.charAt(i);
            if(i + 1 >= p.length() || p.charAt(i + 1) != '*')
                i++;
            else if(isMatch(s, p.substring(i + 2)))
                return true;

            if(s.isEmpty() || (c != '.' && c != s.charAt(0)))
                return false;
        }

        return s.isEmpty();
    }
}



public class Solution {
    public boolean isMatch(String s, String p) {
        return p.isEmpty() ? 
        s.isEmpty() : 
        p.length() > 1 && p.charAt(1) == '*' ?
        isMatch(s, p.substring(2)) ? 
        true : 
        s.isEmpty() || (s.charAt(0) != p.charAt(0) && p.charAt(0) != '.') ? 
        false : 
        isMatch(s.substring(1), p) : 
        s.isEmpty() || (s.charAt(0) != p.charAt(0) && p.charAt(0) != '.') ? 
        false : 
        isMatch(s.substring(1), p.substring(1));
    }
}

