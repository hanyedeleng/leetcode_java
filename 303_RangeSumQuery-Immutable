Given an integer array nums, find the sum of the elements between indices i and j (i â‰¤ j), inclusive.

Example:
Given nums = [-2, 0, 3, -5, 2, -1]

sumRange(0, 2) -> 1
sumRange(2, 5) -> -1
sumRange(0, 5) -> -3
Note:
You may assume that the array does not change.
There are many calls to sumRange function

My solution:
public class NumArray {
    private int[] nums;
    public NumArray(int[] nums) {
      this.nums = nums;    
    }

    public int sumRange(int i, int j) {
      int low = Math.max(0, i);
      int high = Math.min(nums.length, j);
      int result = 0;
      for(int k = low; k < high; k++) {
        result += nums[k];
      }
      return result;
    }
}

Time Limit Exceeded 



other's solution:
public class NumArray {
    private int[] sums;

    public NumArray(int[] nums) {
        sums= nums;
        for(int i=1; i<nums.length; i++){
            sums[i] += sums[i-1];
        }
    }

    public int sumRange(int i, int j) {
        return i==0 ? sums[j] : sums[j]-sums[i-1];
    }
}

