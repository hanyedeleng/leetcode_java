The gray code is a binary numeral system where two successive values differ in only one bit.
Given a non-negative integer n representing the total number of bits in the code, print the sequence of gray code. 
A gray code sequence must begin with 0.
For example, given n = 2, return [0,1,3,2]. Its gray code sequence is:
00 - 0
01 - 1
11 - 3
10 - 2
Note:
For a given n, a gray code sequence is not uniquely defined.
For example, [0,2,3,1] is also a valid gray code sequence according to the above definition.
For now, the judge is able to judge based on one instance of gray code sequence. Sorry about that.

Solution:
public class Solution {
    public List<Integer> grayCode(int n) {
    List<Integer> list = new ArrayList<>();
      if (n == 0) {
        list.add(0);
        return list;
      }
      
      list.add(0);
      int i = 0;
      int tmp = 0;
      while(i < n) {
        tmp +=  Math.pow(2,i);
        list.add(tmp);
        i++;
      }
      while(i>0) {
        tmp -= Math.pow(2,n-i);
        list.add(tmp);
        i--;
      }
      return list;
    }
}
Myown version not working...
All we need to do is to add an '1' to the top digit of the binary string and reversely added the new number to the list.

Second time version:
public class Solution {
    public List<Integer> grayCode(int n) {
        ArrayList<String> list = new ArrayList<>();
        if (n == 0) {
            ArrayList<Integer> ans = new ArrayList<>();
            ans.add(0);
            return ans;
        }
        
        list.add("0");
        list.add("1");
        
        for (int i = 2; i <= n; i++) {
            ArrayList<String> tmp = new ArrayList<>();
            for (int j = 0; j < list.size(); j++) {
                tmp.add("0"+list.get(j));
            }
            
            for (int j = list.size() - 1; j >= 0; j--) {
                tmp.add("1" + list.get(j));
            }
            list = tmp;
        }
        ArrayList<Integer> ans = new ArrayList<>();
        for (int i = 0; i < list.size(); i++) {
            ans.add(Integer.parseInt(list.get(i),2));
        }
        return ans;
    }
}
working

public List<Integer> grayCode(int n) {
    List<Integer> ans = new ArrayList<>();
    ans.add(0);

    for(int i = 0; i < n ; i++)
        for(int j = ans.size()-1; j>=0; j--)
            ans.add(ans.get(j)+(1<<i));

    return ans;
}


public static List<Integer> grayCode(int n) {
    if (n < 0)
        return new ArrayList<Integer>();
    if (n == 0) {
        List<Integer> list = new ArrayList<Integer>();
        list.add(0);
        return list;
    }
    List<Integer> tmp = grayCode(n - 1);
    List<Integer> result = new ArrayList<Integer>(tmp);
    int addNumber = 1 << (n - 1);
    for (int i = tmp.size() - 1; i >= 0; i--) {
        result.add(addNumber + tmp.get(i));
    }

    return result;
}


other's solution:
Tips:
1. Math.pow()

public class Solution {
    public List<Integer> grayCode(int n) {
        List<Integer> ans = new ArrayList<Integer>();
        for(int i=0;i<(1<<n);i++)
            ans.add(i^(i>>1));
        return ans;
    }
}

The purpose of this function is to convert an unsigned
binary number to reflected binary Gray code.

The operator >> is shift right. The operator ^ is exclusive or.
unsigned int binaryToGray(unsigned int num)
{
return (num >> 1) ^ num;
}

The purpose of this function is to convert a reflected binary
Gray code number to a binary number.

unsigned int grayToBinary(unsigned int num)
{
unsigned int mask;
for (mask = num >> 1; mask != 0; mask = mask >> 1)
{
num = num ^ mask;
}
return num;
}

