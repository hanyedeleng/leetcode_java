Problem Description:
Given an array of n integers nums and a target, find the number of index triplets i, j, k with 0 <= i < j < k < n that 
satisfy the condition nums[i] + nums[j] + nums[k] < target.
For example, given nums = [-2, 0, 1, 3], and target = 2.
Return 2. Because there are two triplets which sums are less than 2:

[-2, 0, 1]
[-2, 0, 3]

public class Solution{
  public int sumSmaller(int[] a, int t) {
    if (a.length<3) {
      return 0;
    }
    int result = 0;
    for (int i=0;i<a.length-2;i++) {
      for(int j=i+1;j<a.length-1;j++) {
        for(int k=j+1;j<a.length;k++) {
          if (a[i]+a[j]+a[k] < t) {
            result++;
          }
        }
      }
    }
    
    return result;
  }
}

other's n^2 solution:
public int threeSumSmaller(int[] nums, int target) {
    if(nums.length < 3){return 0;}
    int count = 0;
    Arrays.sort(nums);
    for(int i = 0; i < nums.length-2; i++){
        if(nums[i]*3 >= target){break;}
        count += find(nums, target-nums[i], i+1, nums.length-1);
    }
    return count;
}

//find number of pair that sum up smaller than target from given part of array
public int find(int[] nums, int target, int start, int end){
    int count = 0;
    while(start < end){
        if(nums[start] + nums[end] >= target){
            end--;
        }else{
            count += end-start;
            start++;
        }
    }
    return count;
}

