
Write an efficient algorithm that searches for a value in an m x n matrix. This matrix has the following properties:

Integers in each row are sorted from left to right.
The first integer of each row is greater than the last integer of the previous row.
For example,

Consider the following matrix:

[
  [1,   3,  5,  7],
  [10, 11, 16, 20],
  [23, 30, 34, 50]
]
Given target = 3, return true.

public class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
        if (matrix == null) {
            return false;
        }
        
        int row = matrix.length;
        int col = matrix[0].length;
        
        int lo = 0;
        int hi = row - 1;
        while (lo + 1 < hi) {
            int m = lo + (hi-lo)/2;
            if (target == matrix[m][0]) {
                return true;
            }
            if (target > matrix[m][0]) {
                lo = m;
            }else if (target < matrix[m][0]) {
                hi = m;
            }
        }
        if (target == matrix[hi][0] || target == matrix[lo][0]) {
            return true;
        }
        if (target > matrix[hi][0]) {
            int l = 0;
            int h = col - 1;
            while (l <= h) {
                int m = l + (h-l)/2;
                if (target == matrix[hi][m]) {
                    return true;
                }
                if (target > matrix[hi][m]) {
                    l = m+1;
                }else if (target < matrix[hi][m]) {
                    h = m-1;
                }
            }
        }else {
            int l = 0;
            int h = col - 1;
            while (l <= h) {
                int m = l + (h-l)/2;
                if (target == matrix[lo][m]) {
                    return true;
                }
                if (target > matrix[lo][m]) {
                    l = m+1;
                }else if (target < matrix[lo][m]) {
                    h = m-1;
                }
            }           
        }
        return false;
    }
}


public class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
        int start = 0, rows = matrix.length, cols = matrix[0].length;
        int end = rows * cols - 1;
        if (matrix == null || matrix.length == 0 || matrix[0][0]>target || matrix[rows-1][cols-1]<target) 
            return false;
        while (start <= end) {
            int mid = (start + end) / 2;
            if (matrix[mid / cols][mid % cols] == target)
                return true;
            if (matrix[mid / cols][mid % cols] < target)
                start = mid + 1;
            else
                end = mid - 1;
        }
        return false;
    }
}

