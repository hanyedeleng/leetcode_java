Given an array of integers and an integer k, find out whether there are two distinct indices i and j in the array such that
nums[i] = nums[j] and the difference between i and j is at most k.



public class Solution {
    public boolean containsNearbyDuplicate(int[] nums, int k) {
        if (nums.length == 0 || nums.length == 1) {
            return false;
        }
        // map<a[i],i>
        Map<Integer, Integer> map = new HashMap<>();
        
        for (int i = 0; i < nums.length; i++) {
            if (map.get(nums[i]) == null) {
                map.put(nums[i],i);
            }else {
                if (i - map.get(nums[i]) <= k) {
                    return true;
                }else {
                    map.put(nums[i],i);
                }
            }    
        }
        return false;
    }
}

Tips:
[1,0,1,1]
1
Remember to update the key

other's solution:
public boolean containsNearbyDuplicate(int[] nums, int k) {
    HashSet<Integer> hs=new HashSet<>();
    for(int i=0;i<nums.length;i++)
    {
        if(hs.add(nums[i])==false) return true;
        if(hs.size()==k+1) hs.remove(nums[i-k]);
    }
    return false;
}

