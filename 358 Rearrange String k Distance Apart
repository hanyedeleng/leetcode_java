358 Rearrange String k Distance Apart
Given a non-empty string str and an integer k, rearrange the string such that the same characters are at 
least distance k from each other.

All input strings are given in lowercase letters. If it is not possible to rearrange the string, return 
an empty string "".

Example 1:
str = "aabbcc", k = 3
Result: "abcabc"

The same letters are at least distance 3 from each other.
Example 2:
str = "aaabc", k = 3 
Answer: ""

It is not possible to rearrange the string.
Example 3:
str = "aaadbbcc", k = 2
Answer: "abacabcd"
Another possible answer is: "abcabcda"
The same letters are at least distance 2 from each other.
这道题给了我们一个字符串str，和一个整数k，让我们对字符串str重新排序，使得其中相同的字符之间的距离不小于k，这道题的难度标为Hard，
看来不是省油的灯。的确，这道题的解法用到了哈希表，堆，和贪婪算法。这道题我最开始想的算法没有通过OJ的大集合超时了，下面的方法是参
考网上大神的解法，发现十分的巧妙。我们需要一个哈希表来建立字符和其出现次数之间的映射，然后需要一个堆来保存这每一堆映射，按照出现
次数来排序。然后如果堆不为空我们就开始循环，我们找出k和str长度之间的较小值，然后从0遍历到这个较小值，对于每个遍历到的值，如果此时
堆为空了，说明此位置没法填入字符了，返回空字符串，否则我们从堆顶取出一对映射，然后把字母加入结果res中，此时映射的个数减1，如果
减1后的个数仍大于0，则我们将此映射加入临时集合v中，同时str的个数len减1，遍历完一次，我们把临时集合中的映射对由加入堆}]

public string rearrangeString(string str, int k) {
    if (k == 0) return str;
    string res;
    int len = (int)str.size();
    unordered_map<char, int> m;
    priority_queue<pair<int, char>> q;
    for (auto a : str) ++m[a];
    for (auto it = m.begin(); it != m.end(); ++it) {
        q.push({it->second, it->first});
    }
    while (!q.empty()) {
        vector<pair<int, int>> v;
        int cnt = min(k, len);
        for (int i = 0; i < cnt; ++i) {
            if (q.empty()) return "";
            auto t = q.top(); q.pop();
            res.push_back(t.second);
            if (--t.first > 0) v.push_back(t);
            --len;
        }
        for (auto a : v) q.push(a);
    }
    return res;
}

方法：根据出现频率将字母从大到小排列，以k为间隔进行重排。
public class Solution {  
    public String rearrangeString(String str, int k) {  
        if (k <= 0) return str;  
        int[] f = new int[26];  
        char[] sa = str.toCharArray();  
        for(char c: sa) f[c-'a'] ++;  
        int r = sa.length / k;  
        int m = sa.length % k;  
        int c = 0;  
        for(int g: f) {  
            if (g-r>1) return "";  
            if (g-r==1) c ++;  
        }  
        if (c>m) return "";  
        Integer[] pos = new Integer[26];  
        for(int i=0; i<pos.length; i++) pos[i] = i;  
        Arrays.sort(pos, new Comparator<Integer>() {  
           @Override  
           public int compare(Integer i1, Integer i2) {  
               return f[pos[i2]] - f[pos[i1]];  
           }  
        });  
        char[] result = new char[sa.length];  
        for(int i=0, j=0, p=0; i<sa.length; i++) {  
            result[j] = (char)(pos[p]+'a');  
            if (-- f[pos[p]] == 0) p ++;  
            j += k;  
            if (j >= sa.length) {  
                j %= k;  
                j ++;  
            }  
        }  
        return new String(result);  
    }  
}
