Given a binary tree, determine if it is height-balanced.
For this problem, a height-balanced binary tree is defined as a binary tree in which the depth of
the two subtrees of every node never differ by more than 1.

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public boolean isBalanced(TreeNode root) {
      if (root == null) {
        return true;
      }
      if(root.left == null && root.right == null) {
        return true;
      }
      if(isBalanced(root.left) && isBalanced(root.right) && Math.abs(height(root.left)-height(root.right)) <= 1) {
          return true;
      }
      return false;
    }
    
    public int height(TreeNode root) {
        if(root == null) {
            return 0;
        }
        if (root.left == null && root.right == null) {
            return 1;
        }
        return Math.max(height(root.left), height(root.right)) + 1;
    }
}


Other's solution:
public boolean isBalanced(TreeNode root) {
        if(root==null) return true;
        if(Math.abs(deepchar(root.left)-deepchar(root.right))>1) return false;
        if(isBalanced(root.left)==false) return false;
        if(isBalanced(root.right)==false) return false;
        return true;
    }

    public int deepchar(TreeNode root){
        int deep =0;
        if(root==null) return 0;
        else deep =1;
        int dl =deepchar(root.left);
        int dr =deepchar(root.right);
        deep+= dl>dr? dl:dr;
        return deep;
    }
    
