272 Closest Binary Search Tree Value II
Given a non-empty binary search tree and a target value, find k values in the BST that are closest to the
target.
Note:

Given target value is a floating point.
You may assume k is always valid, that is: k ≤ total nodes.
You are guaranteed to have only one unique set of k values in the BST that are closest to the target.

一开始思路非常不明确，看了不少discuss也不明白为什么。在午饭时间从头仔细想了一下，像Closest Binary Search Tree Value I一样，
追求O(logn)的解法可能比较困难，但O(n)的解法应该不难实现。我们可以使用in-order的原理，从最左边的元素开始，维护一个Deque或者
doubly linked list，将这个元素的值从后端加入到Deque中，然后继续遍历下一个元素。当Deque的大小为k时， 比较当前元素和队首元素
与target的差来尝试更新deque。循环结束条件是队首元素与target的差更小或者遍历完全部元素。这样的话时间复杂度是O(n)， 
空间复杂度应该是O(k)。

public class Solution {
    public List<Integer> closestKValues(TreeNode root, double target, int k) {
        LinkedList<Integer> res = new LinkedList<>();
        inOrder(root, target, k, res);
        return res;
    }
    
    private void inOrder(TreeNode root, double target, int k, LinkedList<Integer> res) {
        if(root == null) {
            return;
        }
        inOrder(root.left, target, k, res);
        if(res.size() == k) {
            if(Math.abs(res.get(0) - target) >= Math.abs(root.val - target)) {
                res.removeFirst();
                res.add(root.val);
            } else {
                return;
            }
        } else {
            res.add(root.val);
        }
        inOrder(root.right, target, k, res);
    }
}
