41  First Missing Positive
Given an unsorted integer array, find the first missing positive integer.
For example,
Given [1,2,0] return 3,
and [3,4,-1,1] return 2.

Your algorithm should run in O(n) time and uses constant space.

The basic idea is for any k positive numbers (duplicates allowed), the first missing positive number must 
e within [1,k+1]. The reason is like you put k balls into k+1 bins, there must be a bin empty, the empty 
bin can be viewed as the missing number.

Unfortunately, there are 0 and negative numbers in the array, so firstly I think of using partition 
technique (used in quick sort) to put all positive numbers together in one side. This can be finished 
in O(n) time, O(1) space.

After partition step, you get all the positive numbers lying within A[0,k-1]. Now, According to the basic 
idea, I infer the first missing number must be within [1,k+1]. I decide to use A[i] (0<=i<=k-1) to 
indicate whether the number (i+1) exists. But here I still have to main the original information A[i] 
holds. Fortunately, A[i] are all positive numbers, so I can set them to negative to indicate the 
existence of (i+1) and I can still use abs(A[i]) to get the original information A[i] holds.
After step 2, I can again scan all elements between A[0,k-1] to find the first positive element A[i], 
that means (i+1) doesn't exist, which is what I want.'


 public int firstMissingPositive(int[] A) {
    int n=A.length;
    if(n==0)
        return 1;
    int k=partition(A)+1;
    int temp=0;
    int first_missing_Index=k;
    for(int i=0;i<k;i++){
        temp=Math.abs(A[i]);
        if(temp<=k)
            A[temp-1]=(A[temp-1]<0)?A[temp-1]:-A[temp-1];
    }
    for(int i=0;i<k;i++){
        if(A[i]>0){
            first_missing_Index=i;
            break;
        }
    }
    return first_missing_Index+1;
}

public int partition(int[] A){
    int n=A.length;
    int q=-1;
    for(int i=0;i<n;i++){
        if(A[i]>0){
            q++;
            swap(A,q,i);
        }
    }
    return q;
}

public void swap(int[] A, int i, int j){
    if(i!=j){
        A[i]^=A[j];
        A[j]^=A[i];
        A[i]^=A[j];
    }
}

----
public int firstMissingPositive(int[] nums) {
    int start = 0;
    int end = nums.length - 1;
    while (start <= end) {
        int index = nums[start] - 1;
        if (index == start)
            start++;
        else if (index < 0 || index > end || nums[start] == nums[index])
            nums[start] = nums[end--];
        else {
            nums[start] = nums[index];
            nums[index] = index + 1;
        }
    }
    return start + 1;
}


//类似于桶排序，交换数组元素，使得数组中第i位存放数值(i+1);  
//最后遍历数组，寻找第一个不符合此要求的元素，返回其下标。整个过程需要遍历两次数组，复杂度为O(n)。  
class Solution {  
public:  
 int firstMissingPositive(vector<int>& nums) {  
     int n = nums.size();  
     for (int i = 0; i < n; ++i)  
     {  
         while (nums[i]>0 && nums[i] < n && nums[nums[i]-1] !=nums[i])  
             swap(nums[nums[i]-1], nums[i]);  
     }  
     for (int i= 0; i < n; ++i)  
     {  
         if (nums[i] != i + 1)  
             return i + 1;  
     }  
     return n + 1;  
 }  
};



