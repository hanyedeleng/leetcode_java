Given a binary tree, return the level order traversal of its nodes' values. (ie, from left to right, level by level).

For example:
Given binary tree {3,9,20,#,#,15,7},
    3
   / \
  9  20
    /  \
   15   7
return its level order traversal as:
[
  [3],
  [9,20],
  [15,7]
]


/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public List<List<Integer>> levelOrder(TreeNode root) {
        ArrayList<List<Integer>> lists = new ArrayList<List<Integer>>();
        
        if (root == null) {
            return lists;
        }
        Queue<TreeNode> curLevel = new LinkedList<TreeNode>();
        curLevel.add(root);
        
        while (!curLevel.isEmpty()) {
            ArrayList<Integer> list = new ArrayList<Integer>();
            Queue<TreeNode> tmp = new LinkedList<TreeNode>();
            
            while (!curLevel.isEmpty()) {
                TreeNode t = curLevel.remove();
                if (t.left != null) {
                    tmp.add(t.left);
                }
                if (t.right != null) {
                    tmp.add(t.right);
                }
                list.add(t.val);
            }
            curLevel = tmp;
            lists.add(list);
        }
        
        return lists;
    }
}

