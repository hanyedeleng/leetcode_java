216	Combination Sum III
Find all possible combinations of k numbers that add up to a number n, given that only numbers from 1 to 9
can be used and each combination should be a unique set of numbers.

Example 1:
Input: k = 3, n = 7

Output:
[[1,2,4]]

Example 2:
Input: k = 3, n = 9

Output:
[[1,2,6], [1,3,5], [2,3,4]]

public class Solution {
	public List<List<Integer>> combinationSum3(int k, int n) {
		ArrayList<List<Integer>> lists = new ArrayList<List<Integer>>();
		helper(lists, new ArrayList<Integer>(), 1, k, n);
		return lists;
	}

	public void helper(ArrayList<List<Integer>> lists, List<Integer> list, int start, int k, int n) {
		if (list.size() == k) {
		    if (n == 0) {
			    lists.add(new ArrayList<>(list));// why need to new ArrayList<>(list), or just get two numbers;
			    return;
		    }
		    return;
		}
		ArrayList<Integer> tmp = new ArrayList<>(list);
		for (int i = start; i <= 9; i++) {
		    tmp.add(i);
			helper(lists, tmp, i+1, k, n-i);
			tmp.remove(tmp.size()-1);
		}
	}
}

// remember start position, k keep the same, n - i, and add (new ArrayList<List>) !!!!
