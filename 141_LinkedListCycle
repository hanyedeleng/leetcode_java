Given a linked list, determine if it has a cycle in it.

Follow up:
Can you solve it without using extra space?


/**
 * Definition for singly-linked list.
 * class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {
    public boolean hasCycle(ListNode head) {
      if(head==null||head.next==null) {
          return false;
      }
      
      ListNode fast = head;
      ListNode slow = head;
      do {
          if(fast.next==null || fast.next.next==null) {
              return false;
          }
          fast = fast.next.next;
          slow = slow.next;
          
          }while(fast!=slow);
      return true;
    }
}

Tips:1. Floyd's cycle finding
    2. java do while statement, has a ";" at the end of while.
