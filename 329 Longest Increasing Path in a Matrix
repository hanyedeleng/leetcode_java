329 Longest Increasing Path in a Matrix
Given an integer matrix, find the length of the longest increasing path.
From each cell, you can either move to four directions: left, right, up or down. You may NOT move 
diagonally or move outside of the boundary (i.e. wrap-around is not allowed).}

Example 1:
nums = [
  [9,9,4],
  [6,6,8],
  [2,1,1]
]
Return 4
The longest increasing path is [1, 2, 6, 9].

Example 2:

nums = [
  [3,4,5],
  [3,2,6],
  [2,2,1]
]
Return 4
The longest increasing path is [3, 4, 5, 6]. Moving diagonally is not allowed.
my solution doesn't give the right answer
public class Solution {
    public int longestIncreasingPath(int[][] matrix) {
        if (matrix.length == 0) {return 0;}
        boolean[][] visited = new boolean[matrix.length][matrix[0].length];
        int max = 0;
        for (int i = 0; i < matrix.length; i++) {
            for (int j = 0; j < matrix[0].length; j++) {
                max = Math.max(max, helper(matrix, i, j, visited));    
            }
        }
        return max;
    }
    
    public int helper(int[][] matrix, int i, int j, boolean[][] visited) {
        visited[i][j] = true;
        int tmp = 0;
        if (i-1 >= 0 && matrix[i-1][j] > matrix[i][j] && visited[i-1][j] == false) {
            tmp = Math.max(tmp, helper(matrix, i-1, j, visited));
        }
        if (i+1 < matrix.length && matrix[i+1][j] > matrix[i][j] && visited[i+1][j] == false) {
            tmp = Math.max(tmp, helper(matrix, i+1, j, visited));
        }
        if (j-1 >= 0 && matrix[i][j-1] > matrix[i][j] && visited[i][j-1] == false) {
            tmp = Math.max(tmp, helper(matrix, i, j-1, visited));
        }
        if (j+1 < matrix.length && matrix[i][j+1] > matrix[i][j] && visited[i][j+1] == false) {
            tmp = Math.max(tmp, helper(matrix, i+1, j, visited));
        }
        return tmp+1;
    }
}

???????
other's solution:
public class Solution {
    int[][] dis = {{1,0},{-1,0},{0,1},{0,-1}};
    public int longestIncreasingPath(int[][] matrix) {
      if(matrix.length == 0 ){
            return 0;
      }
      int[][] state = new int[matrix.length][matrix[0].length];
      int res = 0;
      for(int i = 0; i < matrix.length; i++){
          for(int j = 0; j < matrix[0].length; j++){
             res = Math.max(res,dfs(i,j,matrix,state));
          }
      }
      return res;
    }
      public int dfs(int i, int j, int[][] matrix,int[][] state){
          if(state[i][j] > 0) return state[i][j];
          int max = 0;
          for(int m = 0; m < dis.length; m++){
              if(i + dis[m][0] >= 0 && i + dis[m][0] < matrix.length 
                && j + dis[m][1] >= 0 && j + dis[m][1] < matrix[0].length 
                && matrix[i+dis[m][0]][j+dis[m][1]] > matrix[i][j]){
                  max = Math.max(max,dfs(i + dis[m][0],j + dis[m][1],matrix,state));
              }
          }
          state[i][j] = 1 + max;
          return state[i][j];

      }
}
