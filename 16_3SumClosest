Given an array S of n integers, find three integers in S such that the sum is closest to a given number, target. 
Return the sum of the three integers. You may assume that each input would have exactly one solution.
    For example, given array S = {-1 2 1 -4}, and target = 1.

    The sum that is closest to the target is 2. (-1 + 2 + 1 = 2).
    

Solution:

public class Solution {
    public int threeSumClosest(int[] nums, int target) {
      if (nums.length <= 2) {
        return 0;
      }
      Arrays.sort(nums);
      int len = nums.length;
      int result = nums[len-1]+nums[len-2]+nums[len-3];
      if(target >= result) {
        return result;
      }
      
      for(int i = 0; i < len-2; i++) {
        int lo = i+1;
        int hi = len-1;
        if(nums[i]+nums[lo]+nums[hi] == target) {
          return target;
        }
        
        if(nums[i]+nums[lo]+nums[hi] < target) {
          lo++;
          while(lo+1<len && nums[lo] == nums[lo+1]) {
            lo++;
          }
        }
        if(nums[i]+nums[lo]+nums[hi] > target) {
          hi--;
          while(hi-1>=0 && nums[hi] == nums[hi-1]) {
            hi--;
          }
        }
        
        int tmp1 = target - (nums[i]+nums[lo]+nums[hi]);
        result = tartget-result<=tmp1? result:(nums[i]+nums[lo]+nums[hi]);
      }
      return result;
    }
}

other's solution:
public class Solution {
    public int threeSumClosest(int[] num, int target) {
        if (num == null || num.length < 3) {
            return Integer.MAX_VALUE;
        }
        Arrays.sort(num);
        int closet = Integer.MAX_VALUE / 2; // otherwise it will overflow for opeartion (closet-target)'
        for (int i = 0; i < num.length - 2; i++) {
            int left = i + 1;
            int right = num.length - 1;
            while (left < right) {
                int sum = num[i] + num[left] + num[right];
                if (sum == target) {
                    return sum;
                } else if (sum < target) {
                    left++;
                } else {
                    right--;
                }
                closet = Math.abs(sum - target) < Math.abs(closet - target) ? sum : closet;
            }
        }
        return closet;
    }
}
