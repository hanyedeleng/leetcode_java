Determine if a Sudoku is valid, according to: Sudoku Puzzles - The Rules.

The Sudoku board could be partially filled, where empty cells are filled with the character '.'.


A partially filled sudoku which is valid.

Note:
A valid Sudoku board (partially filled) is not necessarily solvable. Only the filled cells need to be validated.


public class Solution {
    public boolean isValidSudoku(char[][] board) {
        
    }
}


Tips:
1.board.length
2.board[0].length
3. HashSet . add()
e. pay attention to parameter tyep;

public class Solution {
    public boolean isValidSudoku(char[][] board) {
        for (int i = 0; i < 9; i++) {
            Set<Character> s = new HashSet<>();
            Set<Character> t = new HashSet<>();
            for (int j = 0; j < 9; j++) {
                if ((board[i][j] != '.' && !s.add(board[i][j])) || (board[j][i] != '.' && !t.add(board[j][i]))) {
                    return false;
                }else {
                    if (i%3 == 0 && j%3 == 0 && !isValidGrid(board,i,j)) {
                        return false;
                    }
                }    
            }
        }
        return true;
    }
    
    public boolean isValidGrid(char[][] board, int row, int col) {
        Set<Character> s = new HashSet<>();
        for (int i = row; i < row + 3; i++) {
            for (int j = col; j < col + 3; j++) {
                if (i < 9 && j < 9) {
                    if (board[i][j] != '.' && !s.add(board[i][j])) {
                        return false;
                    }
                }
            }
        }
        return true;
    }
}


other's solution:
public class Solution {
public boolean isValidSudoku(char[][] board) {
    for (int i=0; i<9; i++) {
        if (!isParticallyValid(board,i,0,i,8)) return false;
        if (!isParticallyValid(board,0,i,8,i)) return false;
    }
    for (int i=0;i<3;i++){
        for(int j=0;j<3;j++){
            if (!isParticallyValid(board,i*3,j*3,i*3+2,j*3+2)) return false;
        }
    }
    return true;
}
private boolean isParticallyValid(char[][] board, int x1, int y1,int x2,int y2){
    Set singleSet = new HashSet();
    for (int i= x1; i<=x2; i++){
        for (int j=y1;j<=y2; j++){
            if (board[i][j]!='.') if(!singleSet.add(board[i][j])) return false;
        }
    }
    return true;
}
