Wiggle Sort
Given an unsorted array nums, reorder it in-place such that nums[0] <= nums[1] >= nums[2] <= nums[3]....
For example, given nums = [3, 5, 2, 1, 6, 4], one possible answer is [1, 6, 2, 5, 3, 4].

My first thought is sort the arry, then put the smallest first, the largest second, then the second smallest, the second largest...
This solution should work, however, the problem is sorting is really time consumping, so there must be other solutions. 

Java array has method array.sort() 
-> Arrays.sort(nums);

public class Solution {
    public void wiggleSort(int[] nums) {
        if (nums == null || nums.length <= 0)
            return;
        for (int i = 1; i < nums.length; i++) {
            if (i % 2 == 1) {
                if (nums[i-1] > nums[i])
                    swap(nums, i, i-1);
            } else{
                if (nums[i] > nums[i-1])
                    swap(nums, i, i-1);
            }
        }
    }
    
    
    private void swap(int[] nums, int i, int j) {
        int temp = nums[i];
        nums[i] = nums[j];
        nums[j] = temp;
    }
}

Tip:1. array.sort()
