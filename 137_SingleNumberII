Given an array of integers, every element appears three times except for one. Find that single one.
Note:
Your algorithm should have a linear runtime complexity. Could you implement it without using extra memory?

http://blog.csdn.net/exceptional_derek/article/details/17636909
public int singleNumber(int[] A) {  
       int ones=0;  
       int twos=0;  
       int xthrees=0;  
       for(int i = 0;i <A.length;i++){  
               twos ^= (ones&A[i]);  
               ones ^= A[i];  
               xthrees = ~(ones&twos);  
               twos &= xthrees;  
               ones &=xthrees;  
        }  
        return ones;  
   }

http://www.wengweitao.com/lintcode-single-number-i-ii-iii-luo-dan-de-shu.html
变量once作为一个掩码，若once的二进制表示中的一个位置为1，表示目前使该位为1的数只出现一次
变量twice作为一个掩码，若twice的二进制表示中的一个位置为1，表示目前使该位置为1的数出现了2次
变量third作为一个掩码，若third的二进制表示中的一个位置为1，表示目前使该位置为1的数出现了3次
若之前出现一次（表示为once中对应的位为1），A[i]中又出现（表示为A[i]中对应的位置为1），那么twice中对应的位就为1；
若之前的once中出现，而A[i]中又出现，那么就不是出现一次，将对应的位取0
once中出现一次，twice出现两次，也就是出现了3次
需要将once和twice中出现3次的位都置为0
以上的代码涉及到比较多的位运算，可能不大好理解。举个具体的例子：

once： 100101 使第1、3、6个bit为1的数出现3次

twice： 010101 使第1、3、5个bit为1的数出现了2次

third： 000101 根据once和twice可以得到third，第1和3个bit为1的数出现了3次。

以上算法的时间复杂度为O(n)，空间复杂度为O(1)。


public class Solution {
    public int singleNumber(int[] nums) {
      if(nums.length==1) {
        return nums[0];
      }
      if(nums.length<3) {
        return 0;
      }
      int result = 0;
      Arrays.sort(nums);
      int i;
      for(i=0;i<nums.length;i++) {
        if(i==nums.length-1) {
          result = nums[nums.length-1];
          break;
        }
        if(nums[i]==nums[i+1]) {
          i=i+2;
        }else{
          result=nums[i];
          break;
        }
      }
      return result;
    }
}

other's solution:
public class Solution {
    public int singleNumber(int[] A) {
        if (A == null) return 0;
        int x0 = ~0, x1 = 0, x2 = 0, t;
        for (int i = 0; i < A.length; i++) {
            t = x2;
            x2 = (x1 & A[i]) | (x2 & ~A[i]);
            x1 = (x0 & A[i]) | (x1 & ~A[i]);
            x0 = (t & A[i]) | (x0 & ~A[i]);
        }
        return x1;
    }
}

The general version of the question would be:

Given an array of integers, every element appears k times except for one. Find that single one who appears l times.
We need a array x[i] with size k for saving the bits appears i times. For every input number a, generate the new counter by x[j] = (x[j-1] & a) | (x[j] & ~a). Except x[0] = (x[k] & a) | (x[0] & ~a).

In the equation, the first part indicates the the carries from previous one. The second part indicates the bits not carried to next one.

Then the algorithms run in O(kn) and the extra space O(k).

public class Solution {
    public int singleNumber(int[] A, int k, int l) {
        if (A == null) return 0;
        int t;
        int[] x = new int[k];
        x[0] = ~0;
        for (int i = 0; i < A.length; i++) {
            t = x[k-1];
            for (int j = k-1; j > 0; j--) {
                x[j] = (x[j-1] & A[i]) | (x[j] & ~A[i]);
            }
            x[0] = (t & A[i]) | (x[0] & ~A[i]);
        }
        return x[l];
    }
}

Tips:
1. remember the break statement, when to use it
2. array index!!!! Out of bundary
