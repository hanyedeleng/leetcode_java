Given a linked list, swap every two adjacent nodes and return its head.

For example,
Given 1->2->3->4, you should return the list as 2->1->4->3.

Your algorithm should use only constant space. You may not modify the values in the list, only nodes itself can be changed.

My solution:
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
public class Solution {
    public ListNode swapPairs(ListNode head) {
        if (head == null || head.next == null) {
            return head;
        }
        
        ListNode nextHead;
        ListNode tmp;
        ListNode ans = head.next;
        while (head != null && head.next != null) {
            nextHead = head.next.next;
            tmp = head;
            head = head.next;
            head.next = tmp;
            if(nextHead != null && nextHead.next != null) {
                head.next.next = nextHead.next;
            }else{
                head.next.next = nextHead;
            }
            head = nextHead;
        }
        
        return ans;
    }
}


other's solution:
public class Solution {
  public ListNode swapPairs(ListNode head) {
    ListNode start = new ListNode(0); //make head no longer a special case
    start.next = head;

    for(ListNode cur = start; cur.next != null && cur.next.next != null; cur = cur.next.next) {
      cur.next = swap(cur.next, cur.next.next);        
    }
    return start.next;
  }
  private Listnode swap(ListNode next1, ListNode next2) {
    next1.next = next2.next;
    next2.next = next1;
    return next2;
  }
}
