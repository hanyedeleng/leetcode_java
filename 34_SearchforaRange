Given a sorted array of integers, find the starting and ending position of a given target value.
Your algorithm's runtime complexity must be in the order of O(log n).
If the target is not found in the array, return [-1, -1].

For example,
Given [5, 7, 7, 8, 8, 10] and target value 8,
return [3, 4].

public class Solution {
    public int[] searchRange(int[] nums, int target) {
      int[] ans = new int[2];
      ans[0] = ans[1] = -1;
      
      if (nums.length == 0) {
        return ans;
      }
      
      int lo = 0;
      int hi = nums.length-1;
      while(lo <= hi) {
        int mid = lo + (hi-lo)/2;
        if (nums[mid] == target) {
          int tmp = mid;
          while (tmp-1>=0 && nums[tmp-1] == nums[tmp]) {
            tmp--;      
          }
          ans[0] = tmp;
          while(mid+1 < nums.length && nums[mid+1] == nums[mid]) {
            mid++;
          }
          ans[1] = mid;
          return ans;
        }else if (nums[mid] > target) {
          hi = mid-1;
        }else if (nums[mid] < target) {
          lo = mid+1;
        }
        
      }
      return ans;
    }
}

Tips:
1. lo = 0, hi = length - 1;
2. mid, mid+1, mid-1


