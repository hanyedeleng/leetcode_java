Invert a binary tree.

     4
   /   \
  2     7
 / \   / \
1   3 6   9
to
     4
   /   \
  7     2
 / \   / \
9   6 3   1
Trivia:
This problem was inspired by this original tweet by Max Howell:
Google: 90% of our engineers use the software you wrote (Homebrew), but you canâ€™t invert a binary tree on a whiteboard so fuck off.


public class Solution {
    public TreeNode invertTree(TreeNode root) {
        if (root == null) {
            return root;
        }
        
        TreeNode left = invertTree(root.left);
        TreeNode right = invertTree(root.right);
        
        root.left = right;
        root.right = left;
        return root;
    }
}

Solution:
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public TreeNode invertTree(TreeNode root) {
      if (root == null) return root;
      if (root.right==null && root.left==null) return root;
      if (root.right==null && root.left!=null) {
          root.right = invertTree(root.left);
          root.left = null;
          return root;
      }
      if (root.left==null && root.right!=null) {
          root.left = invertTree(root.right);
          root.right = null;
          return root;
      }
      TreeNode tmp = invertTree(root.right);
      root.right = invertTree(root.left);
      root.left = tmp;
      return root;
    }
}

Other's solution:
    if(null == root){

        return root;
    }

    TreeNode temp = null;
    temp = root.left;
    root.left = root.right;
    root.right = temp;
    invertTree(root.left);
    invertTree(root.right);
    return root;
}

Tips:
  1. root == null;
  2. root.left == null; root.right == null
****

For now, tree problems need to consider == null, then, left, right, recursive.
and remember the return statement.
