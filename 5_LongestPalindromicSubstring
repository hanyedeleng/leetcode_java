Given a string S, find the longest palindromic substring in S. You may assume that the maximum length of S is 1000, 
and there exists one unique longest palindromic substring.

public class Solution {
    public String longestPalindrome(String s) {
      int len =  s.length();
      if (len <= 1) {
        return s;
      }
      int max = 0;
      String result = "";
      for (int i = 0; i < s.length() - 1; i++) {
        for (int j = i; j < s.length(); j++) {
          
          if (isPalindrome(s.substring(i,j))) {
            if (j - i > max) {
              max = j - i;
              result = s.substring(i,j);
            }
          }
        }
      }
      return result;
    }
    
    public boolean isPalindrome(String ss) {
      if (ss.length() <= 1) {
        return true;
      }
      
      StringBuilder sb = new StringBuilder();
      for (int i = ss.length() - 1; i >= 0; i--) {
        sb.append(ss.charAt(i));
      }
      
      if (ss.equals(sb.toString())) {
        return true;
      }
      return false;
    }


Other's solution:
public class Solution{
public String longestPalindrome(String s) {
    char[] ca = s.toCharArray();
    int rs = 0, re = 0;
    int max = 0;
    for(int i = 0; i < ca.length; i++) {
        if(isPalindrome(ca, i - max - 1, i)) {
            rs = i - max - 1; re = i;
            max += 2;
        } else if(isPalindrome(ca, i - max, i)) {
            rs = i - max; re = i;
            max += 1;
        }
    }
    return s.substring(rs, re + 1);
}

private boolean isPalindrome(char[] ca, int s, int e) {
    if(s < 0) return false;

    while(s < e) {
        if(ca[s++] != ca[e--]) return false;
    }
    return true;
}
}
https://leetcode.com/discuss/83025/java-easy-understanding-solution-beats-97%25

