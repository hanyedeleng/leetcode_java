243	Shortest Word Distance
Given a list of words and two words word1 and word2, return the shortest distance between these two
words in the list.
For example,
Assume that words = ["practice", "makes", "perfect", "coding", "makes"].
Given word1 = “coding”, word2 = “practice”, return 3.
Given word1 = "makes", word2 = "coding", return 1.
Note:
You may assume that word1 does not equal to word2, and word1 and word2 are both in the list.

public class Solution {
	public shortestWordDistance(String w1, String w1, String[] words) {
		int index_i = -1, index_j = -1;
		int min = 1;
		for (int i = 0; i < words.length; i++) {
			if (words[i] == w1) {
				index_i = i;
			}else if (words[i] == w2) {
				index_j = i;
			}

			if (index_i > 0 && index_j > 0) {
				min = Math.min(Math.abs(i-j), min);
			}
		}
		return min;	
	}
}



Solution:
public class Solution{
  public int ShortestWordDistance(String[] words, String word1, String word2) {
    int result = 0;
    ArrayList<Integer> w1 = new ArrayList<>();
    ArrayList<Integer> w2 = new ArrayList<>();
    
    for(int i=0; i< words.length; i++) {
      if (words[i] == word1) {
        w1.add(i);
      }else if (words[i] == word2) {
        w2.add(i);
      }
    }
    
    result = Math.abs(w1-w2);
    for(int e1:w1) {
      for(int e2:w2) {
        if (Math.abs(e1-e2)<result) {
          result = Math.abd(e1-e2);
        }
      }
    }
    
    return result;
  }
}

other's solution:
public int shortestDistance(String[] words, String word1, String word2) {
    int p1 = -1, p2 = -1, min = Integer.MAX_VALUE;

    for (int i = 0; i < words.length; i++) {
        if (words[i].equals(word1)) 
            p1 = i;

        if (words[i].equals(word2)) 
            p2 = i;

        if (p1 != -1 && p2 != -1)
            min = Math.min(min, Math.abs(p1 - p2));
            // maybe I can add one line here
            // if (min==1) {
            //    break;}
    }

    return min;
}

