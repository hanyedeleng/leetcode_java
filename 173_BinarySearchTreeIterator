Implement an iterator over a binary search tree (BST). Your iterator will be initialized with the root node of a BST.

Calling next() will return the next smallest number in the BST.

Note: next() and hasNext() should run in average O(1) time and uses O(h) memory, where h is the height of the tree.



Other's solution:

public class BSTIterator {
Stack<TreeNode> stack=new Stack<TreeNode>();
public BSTIterator(TreeNode root) {
   while(root!=null){
            stack.push(root);
            root=root.left;
        }
    }

    /** @return whether we have a next smallest number */
    public boolean hasNext() {
        if(!stack.isEmpty())
            return true;
        else
             return false;
    }

    /** @return the next smallest number */
    public int next() {
        int res=0;
        if(!stack.isEmpty()){
            TreeNode cur=stack.pop();
            res=cur.val;
            cur=cur.right;
            while(cur!=null){
                stack.push(cur);
                cur=cur.left;
            }
        }
        return res;
    }
