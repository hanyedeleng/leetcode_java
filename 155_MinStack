Design a stack that supports push, pop, top, and retrieving the minimum element in constant time.

push(x) -- Push element x onto stack.
pop() -- Removes the element on top of the stack.
top() -- Get the top element.
getMin() -- Retrieve the minimum element in the stack.


class MinStack {
    List<Integer> list = new ArrayList<>();
    int minValue = Integer.MAX_VALUE;
    public void push(int x) {
      list.add(x);
      minValue = Math.min(minValue, x);
    }

    public void pop() {
      if(list.size() > 1) {
          if(list.get(list.size()-1) == minValue) {
              list.remove(list.size()-1);
              minValue = list.get(0);
              for(int i = 0; i < list.size(); i++) {
                  minValue = Math.min(minValue, list.get(i));
              }
          }else{
              list.remove(list.size()-1);
          }
      }else{
      if(list.size() == 1) {
        list.remove(list.size()-1);
        minValue = Integer.MAX_VALUE;
      }
      }
    }

    public int top() {
      if(list.size() >= 1) {
        return list.get(list.size()-1);
      }
      return 0;
    }

    public int getMin() {
      return minValue;  
    }
}


other's solution:
public class MinStack {
    long min;
    Stack<Long> stack;

    public MinStack(){
        stack=new Stack<>();
    }

    public void push(int x) {
        if (stack.isEmpty()){
            stack.push(0L);
            min=x;
        }else{
            stack.push(x-min);//Could be negative if min value needs to change
            if (x<min) min=x;
        }
    }

    public void pop() {
        if (stack.isEmpty()) return;

        long pop=stack.pop();

        if (pop<0)  min=min-pop;//If negative, increase the min value

    }

    public int top() {
        long top=stack.peek();
        if (top>0){
            return (int)(top+min);
        }else{
           return (int)(min);
        }
    }

    public int getMin() {
        return (int)min;
    }
}

