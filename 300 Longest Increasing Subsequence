300. Longest Increasing Subsequence
Given an unsorted array of integers, find the length of longest increasing subsequence.

For example,
Given [10, 9, 2, 5, 3, 7, 101, 18],
The longest increasing subsequence is [2, 3, 7, 101], therefore the length is 4. Note that there may be more than one LIS combination,
it is only necessary for you to return the length.
Your algorithm should run in O(n2) complexity.

Follow up: Could you improve it to O(n log n) time complexity?


"*********************************"
300	Longest Increasing Subsequence
Given an unsorted array of integers, find the length of longest increasing subsequence.

For example,
Given [10, 9, 2, 5, 3, 7, 101, 18],
The longest increasing subsequence is [2, 3, 7, 101], therefore the length is 4. Note
that there may be more than one LIS combination, it is only necessary for you to return the
length.
Your algorithm should run in O(n2) complexity.

Follow up: Could you improve it to O(n log n) time complexity?
// I got it right;
public class Solution {
    public int lengthOfLIS(int[] nums) {
        if (nums.length <= 0) {
            return nums.length;
        }
        if (nums.length == 2) {
            return nums[1]>nums[0]?2:1;
        }
        
        int[] ans = new int [nums.length];
        ans[0] = 1;
        int max = 1;
        for (int i = 0; i < nums.length-1; i++) {
            for (int j = i+1; j < nums.length; j++) {
                if (nums[j] > nums[i]) {
                    ans[j] = Math.max(ans[j],Math.max(ans[i]+1, 2)); // this line is the most important
                    max = Math.max(max, ans[j]);
                }       
            }
        }
        return max;
    }
}

public class Solution {
    public int lengthOfLIS(int[] nums) 
    {
        List<Integer> sequence = new ArrayList();
        for(int n : nums) update(sequence, n);
    
        return sequence.size();
    }
    
    private void update(List<Integer> seq, int n)
    {
        if(seq.isEmpty() || seq.get(seq.size() - 1) < n) seq.add(n);
        else
        {
            seq.set(findFirstLargeEqual(seq, n), n);
        }
    }
    
    private int findFirstLargeEqual(List<Integer> seq, int target)
    {
        int lo = 0;
        int hi = seq.size() - 1;
        while(lo < hi)
        {
            int mid = lo + (hi - lo) / 2;
            if(seq.get(mid) < target) lo = mid + 1;
            else hi = mid;
        }
    
        return lo;
    }
}
Very clear code! However, it will not return the actual longest increasing subsequence, despite it will return the correct length.
For example, {10, 9, 2, 5, 6, 3, 101, 18} returns [2, 3, 6, 18]



http://www.geeksforgeeks.org/longest-monotonically-increasing-subsequence-size-n-log-n/

// Java program to find length of longest increasing subsequence
// in O(n Log n) time
import java.io.*;
import java.util.*;
import java.lang.Math;
 
class LIS
{
    // Binary search (note boundaries in the caller)
    // A[] is ceilIndex in the caller
    static int CeilIndex(int A[], int l, int r, int key)
    {
        while (r - l > 1)
        {
            int m = l + (r - l)/2;
            if (A[m]>=key)
                r = m;
            else
                l = m;
        }
 
        return r;
    }
 
    static int LongestIncreasingSubsequenceLength(int A[], int size)
    {
        // Add boundary case, when array size is one
 
        int[] tailTable   = new int[size];
        int len; // always points empty slot
 
        tailTable[0] = A[0];
        len = 1;
        for (int i = 1; i < size; i++)
        {
            if (A[i] < tailTable[0])
                // new smallest value
                tailTable[0] = A[i];
 
            else if (A[i] > tailTable[len-1])
                // A[i] wants to extend largest subsequence
                tailTable[len++] = A[i];
 
            else
                // A[i] wants to be current end candidate of an existing
                // subsequence. It will replace ceil value in tailTable
                tailTable[CeilIndex(tailTable, -1, len-1, A[i])] = A[i];
        }
 
        return len;
    }
 
    // Driver program to test above function
    public static void main(String[] args)
    {
        int A[] = { 2, 5, 3, 7, 11, 8, 10, 13, 6 };
        int n = A.length;
        System.out.println("Length of Longest Increasing Subsequence is "+
                            LongestIncreasingSubsequenceLength(A, n));
    }
}
/* This code is contributed by Devesh Agrawal*/

other solution:
public class Solution {
    public int lengthOfLIS(int[] nums) {
        int[] dp = new int[nums.length];
        int len = 0;
        
        for(int x : nums){
            int i = Arrays.binarySearch(dp,0,len,x);
            if(i<0)
                i = -(i+1);
            dp[i] = x;
            if(i == len)
                len++;
        }
        return len;
    }
}

Use Arrays.binarySearch() to get increasing subsequence. the function Returns:
index of the search key, if it is contained in the array within the specified range; otherwise, (-(insertion point) - 1). 
The insertion point is defined as the point at which the key would be inserted into the array: the index of the first element 
in the range greater than the key, or toIndex if all elements in the range are less than the specified key.
In this problem, use Arrays.binarySearch(dp,0,len,x) to let the insert index be len, if find a num, insert in dp[] and then len++,
let the next increasing num insert after it.
For example: {10,9,2,5,3,7,101,18}â€™s insert index is -1,-1,-1,-2,-2,-3,-4,-4 and the dp array is {2,3,7,18,0,0,0,0}

n^2 solution:
public int lengthOfLIS(int[] nums) 
    {
        // Base case
        if(nums.length <= 1) 
            return nums.length;

        // This will be our array to track longest sequence length
        int T[] = new int[nums.length];

        // Fill each position with value 1 in the array
        for(int i=0; i < nums.length; i++)
            T[i] = 1;


        // Mark one pointer at i. For each i, start from j=0.
        for(int i=1; i < nums.length; i++)
        {
            for(int j=0; j < i; j++)
            {
                // It means next number contributes to increasing sequence.
                if(nums[j] < nums[i])
                {
                    // But increase the value only if it results in a larger value of the sequence than T[i]
                    // It is possible that T[i] already has larger value from some previous j'th iteration
                    if(T[j] + 1 > T[i])
                    {
                        T[i] = T[j] + 1;
                    }
                }
            }
        }

        // Find the maximum length from the array that we just generated 
        int longest = 0;
        for(int i=0; i < T.length; i++)
            longest = Math.max(longest, T[i]);

        return longest;
    }
    
