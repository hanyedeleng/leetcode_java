120. Triangle
Given a triangle, find the minimum path sum from top to bottom. Each step you may move to adjacent numbers on the row below.
For example, given the following triangle
[
     [2],
    [3,4],
   [6,5,7],
  [4,1,8,3]
]
The minimum path sum from top to bottom is 11 (i.e., 2 + 3 + 5 + 1 = 11).
Note:
Bonus point if you are able to do this using only O(n) extra space, where n is the total number of rows in the triangle.

public class Solution {
    public int minimumTotal(List<List<Integer>> triangle) {
        int ans = 0;
        if (triangle.size() == 0) {
            return ans;
        }
        for (int i = triangle.size() - 2; i >= 0; i--) {
            List<Integer> nextList = triangle.get(i+1);
            for (int j = 0; j < triangle.get(i).size(); j++) {
                int min = Math.min(nextList.get(j), nextList.get(j+1)) + triangle.get(i).get(j);
                triangle.get(i).set(j,min);
            }
        }
        return triangle.get(0).get(0);
    }
}
