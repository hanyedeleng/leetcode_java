Given a string s and a dictionary of words dict, determine if s can be segmented into a space-separated sequence of one or more dictionary words.
For example, given
s = "leetcode",
dict = ["leet", "code"].
Return true because "leetcode" can be segmented as "leet code".

public class Solution {
    public boolean wordBreak(String s, Set<String> wordDict) {
        if (s.length() == 0) {
            return true;
        }
        
        for (String word:wordDict) {
            int index = s.indexOf(word);
            if (index != -1) {
                if (wordBreak(s.substring(0,index),wordDict) && wordBreak(s.substring(index+word.length()),wordDict)) {
                    return true;
                }
            } 
        }
        return false;
    }
}
TLE

public boolean wordBreak(String s, Set<String> wordDict) {
    boolean[] dp = new boolean[s.length()];
    for(int i=0; i<s.length(); i++)
        for(int j=i; j>=0; j--)
            if(wordDict.contains(s.substring(j,i+1)) && (j == 0 || dp[j-1])){
                dp[i] = true;
                break;
            }
    return dp[s.length()-1];
}

public boolean wordBreak(String s, Set<String> wordDict) {
    if (s == null && wordDict == null)
        return true;
    if (s == null || wordDict == null)
        return false;
    //dp[i] represents if s.substring(0, i) is wordbreakable.
    boolean[] dp = new boolean[s.length()+1];
    dp[0] = true;
    for (int i = 1; i <= s.length(); i++) {
        for (int j = 0; j < i; j++) {
            if (dp[j] && wordDict.contains(s.substring(j, i))) {
                dp[i] = true;
                break;
            }
        }
    }
    return dp[s.length()];
}
