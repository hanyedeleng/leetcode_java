Given n, how many structurally unique BST's (binary search trees) that store values 1...n?

For example,
Given n = 3, there are a total of 5 unique BST's.

   1         3     3      2      1
    \       /     /      / \      \
     3     2     1      1   3      2
    /     /       \                 \
   2     1         2                 3
   
   
  n(1) = 1;
  n(2) = 2;
  n(3) = 5;
  n(4) = 2*n(3) + n(2)*n(2);
  n(5) = 2*n(4) + 2*n(3) + n(2)*n(2);
  n(6) = 2*n(5) + 2*n(4) + n(3)*n(2) + n(2)*n(3);
   
Solution:
public class Solution {
    public int numTrees(int n) {
      if (n<=2) {
        return n;
      }
      
      int[] a = new int[n+1];
      a[0] = 1;
      a[1] = 1;
      a[2] = 2;
      a[3] = 5;
      int i = 4;
      while(i<=n) {
        int j = 1;
        while (j<=i) {
          a[i] += a[j-1]*a[i-j];
          j++;
        }
        i++;
      }
      
      return a[n];
    }
}

Other's solution:
public int numTrees(int n) {
        if (n < 2) return n;
        int[] dp = new int[n + 1];
        dp[0] = 1; dp[1] = 1;
        for (int i = 2; i <= n; i++) {
            int sum = 0;
            for (int j = 0; j < i; j++)
                sum += dp[j] * dp[i - j - 1];
            dp[i] = sum;
        }
        return dp[n];
    }


Tips:
1. use array to store multiple value;
2. pay attention to the index.
3. analyze!!!.
Bug free 
