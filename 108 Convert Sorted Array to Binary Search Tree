Given an array where elements are sorted in ascending order, convert it to a height balanced BST.



/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public TreeNode sortedArrayToBST(int[] nums) {
      return bst(nums, 0, nums.length-1);
    }
    
    public TreeNode bst(int[] nums, int low, int high) {
      if(nums==null || low>high) {
          return null;
      }
      int mid = low+(high-low)/2;
      TreeNode t = new TreeNode(nums[mid]);
      t.left = bst(nums, low, mid-1);
      t.right = bst(nums, mid+1, high);
      return t;
    }

}

my another solution:
public class Solution {
    public TreeNode sortedArrayToBST(int[] nums) {
        if (nums.length == 0) {
            return null;
        }
        
        TreeNode root = new TreeNode(nums[nums.length/2]);
        helper(root, nums, 0, nums.length-1);
        return root;
    }
    public void helper(TreeNode root, int[] nums, int lo, int hi) {
        if (lo > hi) {
            return;
        }
        System.out.println(root.val);
        int m = lo + (hi-lo)/2;
        root.val = nums[m];
        if (lo <= m-1) {
            root.left = new TreeNode(0);
            helper(root.left, nums, lo, m-1);

        }
        if (m+1 <= hi) {
            root.right = new TreeNode(0);
            helper(root.right, nums, m+1, hi);
        }

    }
}

Tips:
  1. remember to check return type whether the same type of the method
  2. nums == null or length < 1;
  3. TreeNode t = new TreeNode(nums[index]), don't use TreeNode t = null. then t.val!!!!!!! null pointer error
