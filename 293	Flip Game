Problem Description:
You are playing the following Flip Game with your friend: Given a string that contains only these two characters: + and -, 
you and your friend take turns to flip two consecutive "++" into "--". 
The game ends when a person can no longer make a move and therefore the other person will be the winner.
Write a function to compute all possible states of the string after one valid move.
For example, given s = "++++", after one move, it may become one of the following states:
[
  "--++",
  "+--+",
  "++--"
]
If there is no valid move, return an empty list [].
293	Flip Game
You are playing the following Flip Game with your friend: Given a string that contains only these two
characters: + and -, you and your friend take turns to flip twoconsecutive "++" into "--". The game
ends when a person can no longer make a move and therefore the other person will be the winner.

Write a function to compute all possible states of the string after one valid move
For example, given s = "++++", after one move, it may become one of the following states:

[
  "--++",
  "+--+",
  "++--"
]
If there is no valid move, return an empty list [].

public class Solution {
	public List<String> generatePossibleNextMoves(String s) {
		ArrayList<String> list = new ArrayList<>();
		if (s.length() <= 1) {
			return list;
		}

		char[] str = s.toCharArray();
		for (int i = 0; i < str.length-1; i++) {
			if (str[i] == '+' && str[i+1] == '+') {
				str[i] = '-';
				str[i+1] = '-';
				list.add(new String(str));
				str[i] = '+';
				str[i+1] = '+';
			}
		}

		return list;
	}
}

public class Solution {
    public List<String> generatePossibleNextMoves(String s) {
        List<String> res = new ArrayList<>();
        if(s.length() < 2) return res;
        for(int i=0; i<s.length()-1;i++){
            if(s.charAt(i) != '+' || s.charAt(i+1) != '+') continue;
            String t = s.substring(0, i) + "--" + s.substring(i+2);
            res.add(t);
        }

        return res;
    }
}

Solution:
public class Solution{
  public List<String> generatePossibleNextMoves(String s) {
    List<String> solution = new ListArray<>();
    if (s.length<2) {
      return solution;
    }
    
    for (int i=0; i<s.length-1;i++) {
    // string can't be changed !!!!***
      if (s.charAt(i) == "+" && s.charAt(i+1) == "+") {
        s.charAt(i)="-";
        s.charAt(i+1)="-";
        solution.add(s);
        s.charAt(i)="+";
        s.charAt(i)="+";
      }
      if (s.charAt(i) == '+' && s.charAt(i + 1) == '+') {
        String s1 = s.substring(0, i);
        String s2 = "--";
        String s3 = s.substring(i + 2);
        String temp = s1 + s2 + s3;
        solution.add(temp);
      }
    }
    
    return solution;
  }
}

Tip:1. java and &&
    2. java or ||
    3. string s.substring(0,i)
    (the first parameter is position, the second is lengh). so s.substring(0,0) is null.
    
