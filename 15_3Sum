Given an array S of n integers, are there elements a, b, c in S such that a + b + c = 0? Find all unique triplets in the array which gives the sum of zero.

Note:
Elements in a triplet (a,b,c) must be in non-descending order. (ie, a ≤ b ≤ c)
The solution set must not contain duplicate triplets.
    For example, given array S = {-1 0 1 2 -1 -4},

    A solution set is:
    (-1, 0, 1)
    (-1, -1, 2)
    

public class Solution {
    public List<List<Integer>> threeSum(int[] nums) {
      ArrayList<List<Integer>> lists = new ArrayList<List<Integer>>();
      if (nums.length >= 3) {
        for (int i = 0; i < nums.length-2; i++) {
          for (int j = i+1; j < nums.length-1; j++) {
            for (int k = j+1; k < nums.length; k++) {
              if (nums[i] + nums[j] + nums[k] == 0) {
                ArrayList<Integer> list = new ArrayList<>();
                list.add(nums[i]);
                if (nums[j] >= list.get(0)) {
                  list.add(nums[j]);
                }else {
                  list.add(0,nums[j]);
                }
                if (nums[k] >= list.get(1)) {
                  list.add(nums[k]);
                }else if(nums[k] >= list.get(0)) {
                  list.add(1, nums[k]);
                }else {
                  list.add(0, nums[k]);
                }
                if (!lists.contains(list)) {
                 lists.add(list);
                }
              }
            }
          }
        }
      }
      return lists;
    }
}
Time limit exceeded;
Tips:
1. pay attention to unique, means not duplicated solution


    Arrays.sort(nums);
    List<List<Integer>> res = new LinkedList<>();
    for(int i = 0;i< nums.length-2;i++){
        if(i==0 || (i>0 && nums[i] !=nums[i-1])){
        int lo = i+1;
        int hi = nums.length-1;
        int sum = 0 - nums[i];
        while(lo<hi){
            if(nums[lo] + nums[hi]==sum){
                res.add(Arrays.asList(nums[i],nums[lo],nums[hi]));
            while(lo<hi && nums[lo]== nums[lo+1]) lo++;
            while(lo<hi && nums[hi] == nums[hi-1]) hi--;
            lo++; hi--; }
            else if(nums[lo]+nums[hi]<sum) {
                 while (lo < hi && nums[lo] == nums[lo+1]) lo++;
                lo++;
            }
            else{
                while (lo < hi && nums[hi] == nums[hi-1]) hi--;
                hi--;
            }
        }
        }
    }
    return res;
}

https://leetcode.com/discuss/1760/any-solution-which-is-better-than-o-n-2-exists
http://www.cs.princeton.edu/~chazelle/pubs/lindegen-jacm.pdf



