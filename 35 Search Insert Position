Given a sorted array and a target value, return the index if the target is found. If not, return the index where it would be
if it were inserted in order.

You may assume no duplicates in the array.

Here are few examples.
[1,3,5,6], 5 → 2
[1,3,5,6], 2 → 1
[1,3,5,6], 7 → 4
[1,3,5,6], 0 → 0

Solution:
public class Solution {
    public int searchInsert(int[] nums, int target) {
      if(nums==null) {
        return 0;
      }
      
      for(int i=0;i<nums.length;i++) {
        if(nums[i]>=target) {
          return i;
        }
      }
      return nums.length;
    }
}

public class Solution {
    public int searchInsert(int[] nums, int target) {
        if (nums.length == 0) {
            return 0;
        }
        
        int lo = 0;
        int hi = nums.length - 1;
        
        while (lo <= hi) {
            int m = lo + (hi-lo)/2;
            if (nums[m] == target) {
                return m;
            }
            if (nums[m] > target) {
                hi = m - 1; 
            }else {
                lo = m + 1;
            }
        }
        return lo;
    }
}

other's solution:
public int searchInsert(int[] nums, int target) {
    for (int i = 0; i < nums.length; i++) {
        if (nums[i] >= target)
            return i;
    }
    return nums.length;
}

    public int searchInsert(int[] A, int target) {
        int low = 0, high = A.length-1;
        while(low<=high){
            int mid = (low+high)/2;
            if(A[mid] == target) return mid;
            else if(A[mid] > target) high = mid-1;
            else low = mid+1;
        }
        return low;
    }
    
    
Tips:
1. for statement (i=0; need to be a statement
2. resturn nums.length, instead of i
