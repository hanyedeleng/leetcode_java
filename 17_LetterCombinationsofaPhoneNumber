Given a digit string, return all possible letter combinations that the number could represent.

A mapping of digit to letters (just like on the telephone buttons) is given below.

Input:Digit string "23"
Output: ["ad", "ae", "af", "bd", "be", "bf", "cd", "ce", "cf"].
Note:
Although the above answer is in lexicographical order, your answer could be in any order you want.


public class Solution {
    public List<String> letterCombinations(String digits) {
      ArrayList<String> list = new ArrayList<>();
      // 2-9 -->0-7
      String[] map = new String[8];
      map[0] = "abc";
      map[1] = "def";
      map[2] = "ghi";
      map[3] = "jkl";
      map[4] = "mno";
      map[5] = "pqrs";
      map[6] = "tuv";
      map[7] = "wxyz";
      
      int len = digits.length();
      if (len == 0 || digits.indexOf("0") != -1 || digits.indexOf("1") != -1) {
        return list;
      }
      list.add("");
      System.out.println(list.size());
      int i = 0;
      System.out.println(list.get(0));
      while (i < len) {
        for (int j = 0; j < list.size(); j++) {
        // for (Object s:list) {
          String s = list.get(j);
          list.remove(list.get(j));
          for (char c:map[Integer.parseInt(digits.charAt(i)+"")-2].toCharArray()) {
            list.add(s + c);
          }
        }
        i++;
      }
      
      return list;
    }
}

change my solution to LinkedList;
public class Solution {
    public List<String> letterCombinations(String digits) {
      LinkedList<String> list = new LinkedList();
      // 2-9 -->0-7
      String[] map = new String[8];
      map[0] = "abc";
      map[1] = "def";
      map[2] = "ghi";
      map[3] = "jkl";
      map[4] = "mno";
      map[5] = "pqrs";
      map[6] = "tuv";
      map[7] = "wxyz";
      
      int len = digits.length();
      if (len == 0 || digits.indexOf("0") != -1 || digits.indexOf("1") != -1) {
        return list;
      }
      list.add("");
      System.out.println(list.size());
      int i = 0;
      System.out.println(list.get(0));
      while (i < len) {
          while (list.peek().length() == i) {
          String s = list.remove();
          for (char c:map[Integer.parseInt(digits.charAt(i)+"")-2].toCharArray()) {
            list.add(s + c);
          }
        }
        i++;
      }
      
      return list;
    }
}


TLE;
other's solution:
same idea, but he used linkedList
    public List<String> letterCombinations(String digits) {
    LinkedList<String> ans = new LinkedList<String>();
    String[] mapping = new String[] {"0", "1", "abc", "def", "ghi", "jkl", "mno", "pqrs", "tuv", "wxyz"};
    ans.add("");
    for(int i =0; i<digits.length();i++){
        int x = Character.getNumericValue(digits.charAt(i));
        while(ans.peek().length()==i){
            String t = ans.remove();
            for(char s : mapping[x].toCharArray())
                ans.add(t+s);
        }
    }
    return ans;
}


Tip:
1. string.toCharArray()
2. LinkedList.peek()
3. LinkedList.remove();

