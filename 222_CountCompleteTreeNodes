Given a complete binary tree, count the number of nodes.

Definition of a complete binary tree from Wikipedia:
In a complete binary tree every level, except possibly the last, is completely filled, and all nodes in the last level are as far left
as possible. It can have between 1 and 2h nodes inclusive at the last level h.

public int countNodes(TreeNode root) {

    int leftDepth = leftDepth(root);
    int rightDepth = rightDepth(root);

    if (leftDepth == rightDepth)
        return (1 << leftDepth) - 1;
    else
        return 1+countNodes(root.left) + countNodes(root.right);

}

private int rightDepth(TreeNode root) {
    // TODO Auto-generated method stub
    int dep = 0;
    while (root != null) {
        root = root.right;
        dep++;
    }
    return dep;
}

private int leftDepth(TreeNode root) {
    // TODO Auto-generated method stub
    int dep = 0;
    while (root != null) {
        root = root.left;
        dep++;
    }
    return dep;
}

222	Count Complete Tree Nodes
Given a complete binary tree, count the number of nodes.

public class Solution {
    public int countNodes(TreeNode root) {
        if (root == null) {
            return 0;
        }
        int l = leftHeight(root.left);
        int r = leftHeight(root.right);
        if (l == r) { // left side is full
            return countNodes(root.right) + (1<<l);
        } 
        return countNodes(root.left) + (1<<r);
    }
    
    private int leftHeight(TreeNode node) {
        int h = 0;
        while (node != null) {
            h++;
            node = node.left;
        }
        return h;
    }
}

The height of a tree can be found by just going left. Let a single node tree have height 0. Find the height
 h of the whole tree. If the whole tree is empty, i.e., has height -1, there are 0 nodes.

Otherwise check whether the height of the right subtree is just one less than that of the whole tree, 
meaning left and right subtree have the same height.

If yes, then the last node on the last tree row is in the right subtree and the left subtree is a full tree 
of height h-1. So we take the 2^h-1 nodes of the left subtree plus the 1 root node plus recursively the 
number of nodes in the right subtree.
If no, then the last node on the last tree row is in the left subtree and the right subtree is a full tree 
of height h-2. So we take the 2^(h-1)-1 nodes of the right subtree plus the 1 root node plus recursively the number of nodes in the left subtree.
Since I halve the tree in every recursive step, I have O(log(n)) steps. Finding a height costs O(log(n)). 
So overall O(log(n)^2).

