The string "PAYPALISHIRING" is written in a zigzag pattern on a given number of rows like this: (you may want to display this 
pattern in a fixed font for better legibility)

P   A   H   N
A P L S I I G
Y   I   R
And then read line by line: "PAHNAPLSIIGYIR"
Write the code that will take a string and make this conversion given a number of rows:

string convert(string text, int nRows);
convert("PAYPALISHIRING", 3) should return "PAHNAPLSIIGYIR".

public class Solution {
    public String convert(String s, int numRows) {
        if (s.length() == 0) {
            return s;
        }
        
        StringBuilder[] sbs = new StringBuilder[numRows];
        for (int i = 0; i < sbs.length; i++) {
            sbs[i] = new StringBuilder("");
        }
        int i = 0;
        while (i < s.length()) {
            for (int j = 0; j < numRows; j++) {
                if (i < s.length()) {
                    sbs[j].append(s.charAt(i++));
                }else {
                    i++;
                    break;
                }
            }
            for (int j = numRows - 2; j > 0; j--) {
                if (i < s.length()) {
                    sbs[j].append(s.charAt(i++));
                }else {
                    i++;
                    break;
                }
            }
        }
        String ans = "";
        for (i = 0; i < numRows; i++) {
            ans += sbs[i].toString();    
        }
        return ans;
    }
}
Tips: remember to initialize all string builder;
other's solution:

Create nRows StringBuffers, and keep collecting characters from original string to corresponding StringBuffer. Just take care of your index to keep them in bound.

public String convert(String s, int nRows) {
    char[] c = s.toCharArray();
    int len = c.length;
    StringBuffer[] sb = new StringBuffer[nRows];
    for (int i = 0; i < sb.length; i++) sb[i] = new StringBuffer();

    int i = 0;
    while (i < len) {
        for (int idx = 0; idx < nRows && i < len; idx++) // vertically down
            sb[idx].append(c[i++]);
        for (int idx = nRows-2; idx >= 1 && i < len; idx--) // obliquely up
            sb[idx].append(c[i++]);
    }
    for (int idx = 1; idx < sb.length; idx++)
        sb[0].append(sb[idx]);
    return sb[0].toString();
}

awesome!!!
