Given a linked list, remove the nth node from the end of list and return its head.

For example,

   Given linked list: 1->2->3->4->5, and n = 2.

After removing the second node from the end, the linked list becomes 1->2->3->5.
Note:
Given n will always be valid.
Try to do this in one pass.

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
//linkedlist remove(index) linkedlist.size()
public class Solution {
    public ListNode removeNthFromEnd(ListNode head, int n) {
      if(head == null) {
        return head;
      }
      int len = 0;
      ListNode tmp = head;
      while(tmp != null) {
          len++;
          tmp = tmp.next;
      }
      System.out.println(len);
      if(n == len) {
        head = head.next;
        return head;
      }
      
      tmp = head;
      int i = 0;
      while (i < len - n - 1) {
          tmp = tmp.next;
          i++;
      }
      tmp.next = tmp.next.next;
      return head;
    }
}

Tips:
1. Don't forget to increase i
2. tmp != null or tmp.next != null?

other's solution:
public ListNode removeNthFromEnd(ListNode head, int n) {
    ListNode slow = head;
    ListNode fast = head;
    for (int i = 0; i < n; i++) {
        fast = fast.next;
    }
    if (fast == null) {
        return slow.next;
    }
    while (fast.next != null) {
        slow = slow.next;
        fast = fast.next;
    }
    slow.next = slow.next.next;
    return head;
}

The idea of one pass and O(1) space usually comes with two iterators. One is used to construct the new array/list, 
and the other is used to iterate the original array/list.

Specific to this problem, we can define two iterators, one is n step ahead of the other. When the ahead one reach the 
end (its next =NULL), delete the other's next.
