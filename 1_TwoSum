Given an array of integers, return indices of the two numbers such that they add up to a specific target.

You may assume that each input would have exactly one solution.

Example:
Given nums = [2, 7, 11, 15], target = 9,

Because nums[0] + nums[1] = 2 + 7 = 9,
return [0, 1].


public class Solution {
    public int[] twoSum(int[] nums, int target) {
      int[] result = new int[2];
      if(nums.length == 0 || nums.length == 1) {
        return result;
      }
      
      for (int i = 0; i < nums.length-1; i++) {
        // if(nums[i] > target) {
        //   continue;
        // }
        for (int j = i + 1; j < nums.length; j++) {
        //   if(nums[j] > target) {
        //     continue;
        //   }
          if(nums[i] + nums[j] == target) {
            result[0] = i;
            result[1] = j;
            return result;
          }
        }
      }
      return result;
    }
}

my second solution:
public class Solution {
    public int[] twoSum(int[] nums, int target) {
        Map<Integer, Integer> map = new HashMap<>();
        int[] ans = new int[2];
        for (int i = 0; i < nums.length; i++) {
            if (map.get(target-nums[i]) != null) {
                ans[0] = i;
                ans[1] = map.get(target-nums[i]);
                return ans;
            }
            map.put(nums[i],i);
        }
        return ans;
    }
}

Tips:
1. no need to consider whethe a[i] > target, the numbers may be < 0; -1 -2

