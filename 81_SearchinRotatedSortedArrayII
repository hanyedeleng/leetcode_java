81. Search in Rotated Sorted Array II
Follow up for "Search in Rotated Sorted Array":
What if duplicates are allowed?
Would this affect the run-time complexity? How and why?
Write a function to determine if a given target is in the array.

test case: [1,3,1,1,1] 3
public class Solution {
    public boolean search(int[] nums, int target) {
        if (nums.length == 0) {
            return false;
        }
        int lo = 0;
        int hi = nums.length - 1;
        while (lo < hi && nums[lo] == nums[nums.length-1]) {
            lo++;
        }
        while (lo <= hi) {
            int m = lo + (hi-lo)/2;
            if (target == nums[m]) {
                return true;
            }
            if (nums[lo] <= nums[m]) {
                if (target >= nums[lo] && target <= nums[m]) {
                    hi = m - 1;
                }else {
                    lo = m + 1;
                }
            }else {
                if (target >= nums[m] && target <= nums[hi]) {
                    lo = m + 1;    
                }else {
                    hi = m - 1;
                }    
            }
        }
        return false;    
    }
}
//don't forget to check index before use it


