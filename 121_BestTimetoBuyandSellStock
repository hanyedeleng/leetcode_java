Say you have an array for which the ith element is the price of a given stock on day i.
If you were only permitted to complete at most one transaction 
(ie, buy one and sell one share of the stock), design an algorithm to find the maximum profit.

public class Solution {
    public int maxProfit(int[] prices) {
      if (prices == null || prices.length() == 1) {
        return 0;
      }
      int result = 0;
      
      for (int i = 0; i < prices.length() - 1; i++) {
        for (int j = i+1; j < prices.length(); j++) {
          result = Math.max(result, a[j] - a[i]);
        }
      }
      return result;
    }
}

This solution seems working on small set, but if the array is too large, time limit exceeded.
My seconds solution: if the next price is higher than current, use the current to replace the next. Remember to compute the result.
public class Solution {
    public int maxProfit(int[] prices) {
      if (prices == null || prices.length == 1) {
        return 0;
      }
      int result = 0;
      
      for (int i = 0; i < prices.length - 1; i++) {
        if(prices[i+1]>prices[i]) {
            result = Math.max(result, prices[i+1]-prices[i]);
            prices[i+1] = prices[i];
        }
      }
      return result;
    }
}


other's solution:
public int maxProfit(int[] prices) {
    if(prices.length<=1) return 0;
    int buy=Integer.MAX_VALUE;
    int sell=0;

    for(int i=0;i<prices.length;i++){
        sell=Math.max(sell,prices[i]-buy);
        buy=Math.min(buy,prices[i]);
    }
    return sell;
}

Tips:
1. array.length... no () needs.
2. pay attention to the array name.
