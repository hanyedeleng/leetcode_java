Write a function to find the longest common prefix string amongst an array of strings.

solution:
public class Solution {
    public String longestCommonPrefix(String[] strs) {
      if (strs.length == 0) {
        return "";
      }
      if (strs.length == 1) {
        return strs[0];
      }
      String result = "";
      int len = Math.min(strs[0].length(), strs[1].length());
      for(int i = 0; i < len; i++) {
        if(strs[0].charAt(i) == strs[1].charAt(i)) {
          result += strs[0].charAt(i);
        }else {
          break;
        }
      }
      
      for(int j = 2; j < strs.length; j++) {
        String tmpStr = result;
        result = "";
        int len1 = Math.min(strs[j].length(), tmpStr.length());
        for (int i = 0; i < len1; i++) {
            if(strs[j].charAt(i) == tmpStr.charAt(i)) {
                result += tmpStr.charAt(i);
        }
        if(result.length() == 0) {
            return "";
        }
      }

    }
    return result;
}
}

I don't think this one is that good, but we will see:
other's solution:

public String longestCommonPrefix(String[] strs) {
    if(strs == null || strs.length == 0)    return "";
    String pre = strs[0];
    int i = 1;
    while(i < strs.length){
        while(strs[i].indexOf(pre) != 0)
            pre = pre.substring(0,pre.length()-1);
        i++;
    }
    return pre;
}


