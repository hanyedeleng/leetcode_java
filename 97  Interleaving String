97  Interleaving String
Given s1, s2, s3, find whether s3 is formed by the interleaving of s1 and s2.
For example,
Given:
s1 = "aabcc",
s2 = "dbbca",
When s3 = "aadbbcbcac", return true.
When s3 = "aadbbbaccc", return false.

public boolean isInterleave(String s1, String s2, String s3) {
    int l1 = s1.length();
    int l2 = s2.length();
    int l3 = s3.length();
    if (l1 + l2 != l3) {
        return false;
    }
    if (l1 > l2) return isInterleave(s2, s1, s3);
    boolean[] dp = new boolean[l1 + 1];
    char[] v1 = s1.toCharArray();
    char[] v2 = s2.toCharArray();
    char[] v3 = s3.toCharArray();
    dp[0] = true;
    for (int j = 0; j < l1; j++) {
        dp[j + 1] = dp[j] && v1[j] == v3[j];
    }
    for (int i = 0; i < l2; i++) {
        dp[0] = dp[0] && v2[i] == v3[i];// initialize the first column in each row
        for (int j = 0; j < l1; j++) {
            int index = i + j + 1;
            dp[j + 1] = (dp[j] && v1[j] == v3[index]) || (dp[j + 1] && v2[i] == v3[index]);
        }
    }
    return dp[l1];
}


To solve this problem, let's look at if s1[0 ~ i] s2[0 ~ j] can be interleaved to s3[0 ~ k].

Start from indices0, 0, 0 and compare s1[i] == s3[k] or s2[j] == s3[k]
Return valid only if either i or j match k and the remaining is also valid
Caching is the key to performance. This is very similar to top down dp
Only need to cache invalid[i][j] since most of the case s1[0 ~ i] and s2[0 ~ j] does not form s3[0 ~ k]. Also tested caching valid[i][j] the run time is also 1ms
Many guys use substring but it's duplicate code since substring itself is checking char by char. We are already doing so
Hope it helps!

public boolean isInterleave(String s1, String s2, String s3) {
    char[] c1 = s1.toCharArray(), c2 = s2.toCharArray(), c3 = s3.toCharArray();
    int m = s1.length(), n = s2.length();
    if(m + n != s3.length()) return false;
    return dfs(c1, c2, c3, 0, 0, 0, new boolean[m + 1][n + 1]);
}

public boolean dfs(char[] c1, char[] c2, char[] c3, int i, int j, int k, boolean[][] invalid) {
    if(invalid[i][j]) return false;
    if(k == c3.length) return true;
    boolean valid = 
        i < c1.length && c1[i] == c3[k] && dfs(c1, c2, c3, i + 1, j, k + 1, invalid) || 
        j < c2.length && c2[j] == c3[k] && dfs(c1, c2, c3, i, j + 1, k + 1, invalid);
    if(!valid) invalid[i][j] = true;
    return valid;
}
