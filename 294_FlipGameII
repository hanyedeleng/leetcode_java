Problem Description:
You are playing the following Flip Game with your friend: Given a string that contains only these two characters: + and -, 
you and your friend take turns to flip two consecutive "++" into "--". 
The game ends when a person can no longer make a move and therefore the other person will be the winner.
Write a function to determine if the starting player can guarantee a win.
For example, given s = "++++", return true. The starting player can guarantee a win by flipping the middle "++" to become "+--+".
Follow up:
Derive your algorithm's runtime complexity.


https://leetcode.com/discuss/64344/theory-matters-from-backtracking-128ms-to-dp-0ms

Other's solution:
public class Solution {
     public boolean canWin(String s) {
         char[] list = s.toCharArray();
         return helper(list);
     }
     private boolean helper(char[] list) {
         for (int i = 0; i < list.length - 1; i++) {
             if (list[i] == '-' || list[i + 1] == '-') continue;
             list[i] = '-';
             list[i + 1] = '-';
             boolean otherWin = helper(list);
             //need to go back to the original state before return
             list[i] = '+';
             list[i + 1] = '+';
             if (!otherWin) return true;
         }
         return false;
     }
 }
 
 public boolean canWin(String s) {
    if(s == null || s.length() < 2) return false;
    Map<String, Boolean> map = new HashMap<>();
    return canWin(s, map);
}

public boolean canWin(String s, Map<String, Boolean> map){
    if(map.containsKey(s)) return map.get(s);
    for(int i = 0; i < s.length() - 1; i++) {
        if(s.charAt(i) == '+' && s.charAt(i + 1) == '+') {
            String opponent = s.substring(0, i) + "--" + s.substring(i + 2);
            if(!canWin(opponent, map)) {
                map.put(s, true);
                return true;
            }
        }
    }
    map.put(s, false);
    return false;
}

