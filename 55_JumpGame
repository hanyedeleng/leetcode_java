55. Jump Game
Given an array of non-negative integers, you are initially positioned at the first index of the array.
Each element in the array represents your maximum jump length at that position.
Determine if you are able to reach the last index.

For example:
A = [2,3,1,1,4], return true.
A = [3,2,1,0,4], return false.

public class Solution {
    public boolean canJump(int[] nums) {
        int i = 0;
        int n = nums.length;
        int far = 0;
        for (;i<=far&&i<n;++i){
            far = Math.max(far,nums[i]+i);
        }
        return i==n;
    }
}



public class Solution {
    public boolean canJump(int[] nums) {
        int dis = 0;
        for (int i = 0; i <= dis; i++) {
            dis = Math.max(dis, i + nums[i]);
            if (dis >= nums.length-1) {
                return true;
            }
        }
        return false;
    }
}

my version time limit:
public class Solution {
    public boolean canJump(int[] nums) {
        if (nums.length == 0) {
            return true;
        }
        
        return helper(nums, 0, nums.length-1);
    }
    public boolean helper(int[] nums, int index, int len) {
        if (index <= len && nums[index] >= len) {
            return true;
        }
        if (index <= len) {
            for (int i = nums[index]; i > 0; i--) {
                if (helper(nums, index + i, len)) {
                    return true;
                }           
            }
        }
        return false;
    }
}
