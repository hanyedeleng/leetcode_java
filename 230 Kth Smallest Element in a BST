Given a binary search tree, write a function kthSmallest to find the kth smallest element in it.

Note: 
You may assume k is always valid, 1 ≤ k ≤ BST's total elements.



/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public int kthSmallest(TreeNode root, int k) {
      Map<Integer, Integer> map = new HashMap<>();
      helper(root, map);
      return Map.get(k);
    }
    
    public void helper(TreeNode node, Map map);
      int index = 0;
      if(node==null) {
        return;
      }
      if(node.left==null) {
        
      }
    }
}



other's solution:
public static int ans = 0;
public int kthSmallest(TreeNode root, int k) {
    helper(root, k);
    return ans;
}

public int helper(TreeNode root, int k) {
    if (root == null) {
        return 0;
    }
    int leftCount = helper(root.left, k);
    int rightCount = helper(root.right, k - leftCount - 1);
    if (k == leftCount + 1) {
        ans = root.val;
    }
    return leftCount + rightCount + 1;
}
We count the number of nodes of left sub tree and right sub tree recursively.
Suppose the Kth smallest element is in the right sub tree, 
then we need to update k as k - leftCount - 1 (leftCount + 1 is the number of nodes of left sub tree plus the root node). 
Only when k equals leftCount + 1, we find the target.

  public int kthSmallest(TreeNode root, int k) {
        int count = countNodes(root.left);
        if (k <= count) {
            return kthSmallest(root.left, k);
        } else if (k > count + 1) {
            return kthSmallest(root.right, k-1-count); // 1 is counted as current node
        }

        return root.val;
    }

    public int countNodes(TreeNode n) {
        if (n == null) return 0;

        return 1 + countNodes(n.left) + countNodes(n.right);
    }
    
    
