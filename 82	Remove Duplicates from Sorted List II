82	Remove Duplicates from Sorted List II
Given a sorted linked list, delete all nodes that have duplicate numbers, leaving only distinct numbers 
from the original list.

For example,
Given 1->2->3->3->4->4->5, return 1->2->5.
Given 1->1->1->2->3, return 2->3.

public class Solution {
    public ListNode deleteDuplicates(ListNode head) {
        if (head == null || head.next == null) {
            return head;
        }
        
        ArrayList<Integer> ans = new ArrayList<>();
        ArrayList<Integer> dup = new ArrayList<>();
        while (head != null) {
            if (dup.contains(head.val)) {
                dup.add(head.val);
            }else if (ans.contains(head.val)) {
                dup.add(head.val);
                ans.remove(ans.size()-1);
            }else {
                ans.add(head.val);
            }
            head = head.next;
        }
        
        if (ans.size() == 0) {
            return null;
        }
        ListNode newhead = new ListNode(ans.get(0));
        ListNode cur = newhead;
        for (int i = 1; i < ans.size(); i++) {
            cur.next = new ListNode(ans.get(i));
            cur = cur.next;
        }
        return newhead;
    }
}


public class Solution {
    public ListNode deleteDuplicates(ListNode head) {
        if (head == null) return null;
    
        if (head.next != null && head.val == head.next.val) {
            while (head.next != null && head.val == head.next.val) {
                head = head.next;
            }
            return deleteDuplicates(head.next);
        } else {
            head.next = deleteDuplicates(head.next);
        }
        return head;
    }
}
