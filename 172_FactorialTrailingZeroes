Given an integer n, return the number of trailing zeroes in n!.
Note: Your solution should be in logarithmic time complexity.

  return n == 0 ? 0 : n / 5 + trailingZeroes(n / 5);


  public int trailingZeroes(int n) {
    int rs = 0;
    while (n != 0) {
        rs += (n / 5);
        n /= 5;
    }
    return rs;
}

10 is the product of 2 and 5. In n!, we need to know how many 2 and 5, and the number of zeros
 is the minimum of the number of 2 and the number of 5.
Since multiple of 2 is more than multiple of 5, the number of zeros is dominant by the number of 5.
