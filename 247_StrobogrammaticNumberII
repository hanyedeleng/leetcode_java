247 Strobogrammatic Number II
A strobogrammatic number is a number that looks the same when rotated 180 degrees (looked at upside down).
Find all strobogrammatic numbers that are of length = n.

For example,
Given n = 2, return ["11","69","88","96"].

Hint:
Try to use recursion and notice that it should recurse with n - 2 instead of n - 1.

public List<String> findStrobogrammatic(int n) {
    Map<Character, Character> map = buildMap();
    List<String> ret = n % 2 == 0 ? Arrays.asList("") : Arrays.asList("1", "8", "0");

    for (int i = n % 2 == 0 ? 1 : 2; i < n; i += 2) {
        List<String> cur = new ArrayList<>();
        for (char c : map.keySet()) {
            for (String s : ret) {
                // don't add leading 0s!
                if (i != n - 1 || c != '0')
                    cur.add(c + s + map.get(c));
            }
        }
        ret = cur;
    }

    return ret;
}

private Map<Character, Character> buildMap() {
    Map<Character, Character> map = new HashMap<>();
    map.put('1', '1');
    map.put('6', '9');
    map.put('8', '8');
    map.put('9', '6');
    map.put('0', '0');
    return map;
}

public List<String> findStrobogrammatic(int n) {
    return helper(n, n);
}

List<String> helper(int n, int m) {
    if (n == 0) return new ArrayList<String>(Arrays.asList(""));
    if (n == 1) return new ArrayList<String>(Arrays.asList("0", "1", "8"));

    List<String> list = helper(n - 2, m);
    List<String> res = new ArrayList<String>();

    for (int i = 0; i < list.size(); i++) {
        String s = list.get(i);
        if (n != m) res.add("0" + s + "0");

        res.add("1" + s + "1");
        res.add("6" + s + "9");
        res.add("8" + s + "8");
        res.add("9" + s + "6");
    }
    return res;
}
