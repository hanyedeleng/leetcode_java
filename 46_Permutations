Given a collection of distinct numbers, return all possible permutations.

For example,
[1,2,3] have the following permutations:
[1,2,3], [1,3,2], [2,1,3], [2,3,1], [3,1,2], and [3,2,1].

public class Solution {
    public List<List<Integer>> permute(int[] nums) {
      List<list<Interger>> result = ArrayList<ArrayList<>()>();
      Set<Integer> set = new HashSet<Integer>(Arrays.asList(nums));
      if (nums == null) {
        return result;
      }
      loop(nums, set, result);
      return result;
    }
    
    public List<List<Integer>> loop(int[] nums, Set set, List<List<Integer>> result) {
      List<Integer> tmp = new ArrayList<>();
      if (nums.length == 1) {
        tmp.add(nums[0]);
        return tmp;
      }
      for (int i in nums) {
        set.remove(nums[i]);
        result.addAll(i, loop(nums, set, result));
      }
    }
}

My solution is not complete:
other's solution:

public List<List<Integer>> permute(int[] num) {
    List<List<Integer>> ans = new ArrayList<List<Integer>>();
    if (num.length ==0) return ans;
    List<Integer> l0 = new ArrayList<Integer>();
    l0.add(num[0]);
    ans.add(l0);
    for (int i = 1; i< num.length; ++i){
        List<List<Integer>> new_ans = new ArrayList<List<Integer>>(); 
        for (int j = 0; j<=i; ++j){            
           for (List<Integer> l : ans){
               List<Integer> new_l = new ArrayList<Integer>(l);
               new_l.add(j,num[i]);
               new_ans.add(new_l);
           }
        }
        ans = new_ans;
    }
    return ans;
}

public List<List<Integer>> permute(int[] num) {
    LinkedList<List<Integer>> res = new LinkedList<List<Integer>>();
    res.add(new ArrayList<Integer>());
    for (int n : num) {
        int size = res.size();
        for (; size > 0; size--) {
            List<Integer> r = res.pollFirst();
            for (int i = 0; i <= r.size(); i++) {
                List<Integer> t = new ArrayList<Integer>(r);
                t.add(i, n);
                res.add(t);
            }
        }
    }
    return res;
}

