Given a collection of distinct numbers, return all possible permutations.

For example,
[1,2,3] have the following permutations:
[1,2,3], [1,3,2], [2,1,3], [2,3,1], [3,1,2], and [3,2,1].

题解：
http://www.cnblogs.com/springfor/p/3888044.html
这道题就用循环递归解决子问题。

因为求所有组合，这就意味着不能重复使用元素，要用visited数组。

有因为是所有可能的组合，所以循环length次，就是这里面每位都有可能有length个可能性。

正因为如此，每一层递归就不需要传递一个start点，告诉他从哪开始（因为都是从头开始循环）。

 
 1     public ArrayList<ArrayList<Integer>> permute(int[] num) {
 2         ArrayList<ArrayList<Integer>> res = new ArrayList<ArrayList<Integer>>();
 3         ArrayList<Integer> item = new ArrayList<Integer>();
 4         
 5         if(num.length==0||num==null)
 6             return res;
 7         boolean[] visited = new boolean[num.length];  
 8         
 9         permutation_helper(num,res,item,visited);
10         return res;
11     }
12     
13     public void permutation_helper(int[] num, ArrayList<ArrayList<Integer>> res, ArrayList<Integer> item,boolean[] visited){
14         if(item.size()==num.length){
15             res.add(new ArrayList<Integer>(item));
16             return;
17         }
18         
19         for(int i = 0; i<num.length;i++){
20             if(!visited[i]){
21                 item.add(num[i]);
22                 visited[i]=true;
23                 permutation_helper(num,res,item,visited);
24                 item.remove(item.size()-1);
25                 visited[i]=false;
26             }
27         }
28     }







public class Solution {
    public List<List<Integer>> permute(int[] nums) {
      List<list<Interger>> result = ArrayList<ArrayList<>()>();
      Set<Integer> set = new HashSet<Integer>(Arrays.asList(nums));
      if (nums == null) {
        return result;
      }
      loop(nums, set, result);
      return result;
    }
    
    public List<List<Integer>> loop(int[] nums, Set set, List<List<Integer>> result) {
      List<Integer> tmp = new ArrayList<>();
      if (nums.length == 1) {
        tmp.add(nums[0]);
        return tmp;
      }
      for (int i in nums) {
        set.remove(nums[i]);
        result.addAll(i, loop(nums, set, result));
      }
    }
}

My solution is not complete:
other's solution:

public List<List<Integer>> permute(int[] num) {
    List<List<Integer>> ans = new ArrayList<List<Integer>>();
    if (num.length ==0) return ans;
    List<Integer> l0 = new ArrayList<Integer>();
    l0.add(num[0]);
    ans.add(l0);
    for (int i = 1; i< num.length; ++i){
        List<List<Integer>> new_ans = new ArrayList<List<Integer>>(); 
        for (int j = 0; j<=i; ++j){            
           for (List<Integer> l : ans){
               List<Integer> new_l = new ArrayList<Integer>(l);
               new_l.add(j,num[i]);
               new_ans.add(new_l);
           }
        }
        ans = new_ans;
    }
    return ans;
}

public List<List<Integer>> permute(int[] num) {
    LinkedList<List<Integer>> res = new LinkedList<List<Integer>>();
    res.add(new ArrayList<Integer>());
    for (int n : num) {
        int size = res.size();
        for (; size > 0; size--) {
            List<Integer> r = res.pollFirst();
            for (int i = 0; i <= r.size(); i++) {
                List<Integer> t = new ArrayList<Integer>(r);
                t.add(i, n);
                res.add(t);
            }
        }
    }
    return res;
}

