Given a binary tree where all the right nodes are either leaf nodes with a sibling (a left node that shares the same parent node) or empty,
flip it upside down and turn it into a tree where the original right nodes turned into left leaf nodes. Return the new root.
For example:
Given a binary tree {1,2,3,4,5},
1
/ \
2  3
/ \
4 5
return the root of the binary tree [4,5,2,#,#,3,1].
4
/ \
5  2
  / \
 3   1
 
 
 Solution:
 public class Solution {
  public TreeNode binaryTreeUpsideDown(TreeNode root) {
    if(root==null) {
      return root;
    }
    if(root.left!=null) {
      if(root.right!=null) {
        binaryTreeUpsideDown(root.left);
        binaryTreeUpsideDown(root.right);
      }
      binaryTreeUpsideDown(root.left);
    }
  }
 }
 
 other's solution:
 public TreeNode UpsideDownBinaryTree(TreeNode root) {  
    if (root == null)  
        return null;  
    TreeNode parent = root, left = root.left, right = root.right;  
    if (left != null) {  
        TreeNode ret = UpsideDownBinaryTree(left);  
        left.left = right;  
        left.right = parent;  
        return ret;  
    }  
    return root;  
} 

public TreeNode upsideDownBinaryTree(TreeNode root) {
  if (root == null || root.left == null && root.right == null)
    return root;

  TreeNode newRoot = upsideDownBinaryTree(root.left);

  root.left.left = root.right;
  root.left.right = root;

  root.left = null;
  root.right = null;

  return newRoot;
}
