40. Combination Sum II 
Given a collection of candidate numbers (C) and a target number (T), find all unique combinations in C where the candidate numbers sums to T.
Each number in C may only be used once in the combination.

Note:
All numbers (including target) will be positive integers.
Elements in a combination (a1, a2, … , ak) must be in non-descending order. (ie, a1 ≤ a2 ≤ … ≤ ak).
The solution set must not contain duplicate combinations.
For example, given candidate set 10,1,2,7,6,1,5 and target 8,
A solution set is:
[1, 7]
[1, 2, 5]
[2, 6]
[1, 1, 6]

public class Solution {
    public List<List<Integer>> combinationSum2(int[] candidates, int target) {
        ArrayList<List<Integer>> lists = new ArrayList<List<Integer>>();
        if (candidates.length == 0) {
            return lists;
        }

        Arrays.sort(candidates);
        helper(new ArrayList<Integer>(), lists, candidates, target, 0);
        return lists;
    }
    public void helper(ArrayList<Integer> list, List<List<Integer>> lists, int[] candidates, int target, int position) {
        ArrayList<Integer> tmp = new ArrayList<Integer>(list);
        if (tmp != null && target == 0) {
            Collections.sort(tmp);
            if (!lists.contains(tmp)) {
                lists.add(tmp);
            }
            return;
        }
        for (int i = position; i < candidates.length; i++) {
            tmp.add(candidates[i]);
            if (target-candidates[i] >= 0) {
                position++;
                helper(tmp, lists, candidates, target-candidates[i], position);
            }
            tmp.remove(tmp.size()-1);
        }
    }
}
