Given n nodes labeled from 0 to n - 1 and a list of undirected edges (each edge is a pair of nodes), 
write a function to find the number of connected components in an undirected graph.

Example 1:
     0          3
     |          |
     1 --- 2    4
Given n = 5 and edges = [[0, 1], [1, 2], [3, 4]], return 2.
Example 2:
     0           4
     |           |
     1 --- 2 --- 3
Given n = 5 and edges = [[0, 1], [1, 2], [2, 3], [3, 4]], return 1.
Note:
You can assume that no duplicate edges will appear in edges. Since all edges are undirected, 
[0, 1] is the same as [1, 0] and thus will not appear together in edges.

Solution:
public class Solution {
  public int countComponents(int n, int[][] edges) {
    int result = 0;
    
    for (int i=0; i<edges.length; i++) {
      while (i<edges.length-1) && (edges[i+1][0] == edges[i][1]) {
        i++;
      }
      result++;
    }
  }
}

others solution:
public class Solution {
public int countComponents(int n, int[][] edges) {
    int[] root = new int[n];
    for(int i = 0; i < n; i++) root[i] = i;
    for(int[] edge : edges){
        int root1 = findRoot(root, edge[0]), root2 = findRoot(root, edge[1]);
        //Union
        if(root1 != root2) root[root2] = root1;
    }
    //Count components
    int count = 0;
    for(int i = 0; i < n; i++) if(root[i] == i) count++;
    return count;
}

//Find with path compression 
private int findRoot(int[] root, int i){
    while(root[i] != i){
        root[i] = root[root[i]];
        i = root[i];
    }
    return i;
}

Tips:
    1. if the array is not give in order, my code won't work. But the other's solution can handle that.
