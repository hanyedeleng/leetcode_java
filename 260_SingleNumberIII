Given an array of numbers nums, in which exactly two elements appear only once and all the other elements appear exactly twice. 
Find the two elements that appear only once.
For example:
Given nums = [1, 2, 1, 3, 2, 5], return [3, 5].
Note:
The order of the result is not important. So in the above example, [5, 3] is also correct.
Your algorithm should run in linear runtime complexity. Could you implement it using only constant space complexity?

Solution:
public class Solution {
    public int[] singleNumber(int[] nums) {
      if (nums.length<2) {
        System.out.print("Array length should bigger than 2");
        return null;
      }
      
      if (nums.length==2 && nums[0] != nums[1]) {
        return nums;
      }
      
      Map<Integer, Integer> map = new HashMap<>();
      int[] result = new int[2];
      
      for (int i=0; i<nums.length; i++) {
        if (map.get(nums[i]) == null) {
          map.put(nums[i],1);
          continue;
        }
        if (map.get(nums[i]) == 1) {
          map.remove(nums[i]);
        }
      }
      
      int index = 0;
      for (Integer m:map.keySet()) {
        result[index++]=m;
      }
      
      return result;
    }
}

Other's solution:
        public class Solution {
            public int[] singleNumber(int[] nums) {
                HashSet<Integer> h = new HashSet<>();
                for(int n : nums){
                    if(h.contains(n)) h.remove(n);
                    else h.add(n);
                }
                Object[] t =h.toArray();
                int[] result = new int[2];
                result[0] = (int)t[0];
                result[1] = (int)t[1];
                return result;
            }
        }

        public class Solution {
            public int[] singleNumber(int[] nums) {
                Arrays.sort(nums);
                int len = nums.length;
                int[] result = new int[2];
                for(int i = 0; i < len; ){
                    if(i != len - 1 && nums[i] == nums[i+1]) i += 2;
                    else{
                        if(result[0] == 0) result[0] = nums[i];
                        else result[1] = nums[i];
                        i++;
                    }
                }
                return result;
            }
        }


Tips:
  1. consider the effect of the first if ==null effect of  ==1.
  2. java HashMap  keySet
  3. each element of Set, if the set element's type is int, then use Integer to find each element.
  4. don't forget put nums[i], not i in the HashMap
  5. HashMap.remove(key);
  
