39. Combination Sum
Given a set of candidate numbers (C) and a target number (T), find all unique combinations in C where the candidate numbers sums to T.
The same repeated number may be chosen from C unlimited number of times.

Note:
All numbers (including target) will be positive integers.
Elements in a combination (a1, a2, … , ak) must be in non-descending order. (ie, a1 ≤ a2 ≤ … ≤ ak).
The solution set must not contain duplicate combinations.
For example, given candidate set 2,3,6,7 and target 7,
A solution set is:
[7]
[2, 2, 3]

public class Solution {
    public List<List<Integer>> combinationSum(int[] candidates, int target) {
        Arrays.sort(candidates);
        ArrayList<List<Integer>> res = new ArrayList<List<Integer>>();
        add(res, new ArrayList<Integer>(), candidates, 0, target);
        return res;
    }

    private void add(ArrayList<List<Integer>> res, ArrayList<Integer> list, int[] candidates, int start, int target){
        if(target < 0)  return;
        else if(target == 0){
            res.add(list);
            return;
        }
        for(int i=start; i<candidates.length; ++i){
            ArrayList<Integer> temp = new ArrayList<Integer>(list);
            temp.add(candidates[i]);
            add(res, temp, candidates, i, target-candidates[i]);
        }
    }
}
