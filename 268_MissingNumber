Given an array containing n distinct numbers taken from 0, 1, 2, ..., n, find the one that is missing from the array.
For example,
Given nums = [0, 1, 3] return 2.
Note:
Your algorithm should run in linear runtime complexity. Could you implement it using only constant extra space complexity?

Solution:
public class Solution {
    public int missingNumber(int[] nums) {
      if(nums==null || nums.length==0) {
        return 0;
      }
      if(nums.length==1 && nums[0]==0) {
        return nums[0]+1;
      }else if(nums.length==1 && nums[0]!=0){
        return 0;
      }
      
      
      Arrays.sort(nums);
      if(nums[0]!=0){
          return 0;
      }else{
        for(int i=0;i<nums.length-1;i++) {
          if(nums[i+1] != nums[i]+1) {
            return i+1;
          }
        }
        return nums[nums.length-1]+1;
        }
    }
}

other's solution:
public class Solution {
public int missingNumber(int[] nums) {

    int len = nums.length;
    int result=len*(len+1)/2;

    for(int i=0;i<len;i++){
        result-=nums[i];
    }
   return result; 

}

Tips:
  1. don't forget to test
    null, length == 1, first nums[0] ==0 or not
    
    test cases
    
  2. 
