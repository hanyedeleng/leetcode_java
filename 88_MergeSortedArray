Given two sorted integer arrays nums1 and nums2, merge nums2 into nums1 as one sorted array.

Note:
You may assume that nums1 has enough space (size that is greater or equal to m + n) to hold additional elements from nums2.
The number of elements initialized in nums1 and nums2 are m and n respectively.

public class Solution {
    public void merge(int[] nums1, int m, int[] nums2, int n) {
      if(n == 0) {
        return;
      }
      
      int[] tmp = new int[m];
      for (int i = 0; i < m; i++) {
        tmp[i] = nums1[i];
      }
      if(m == 0) {
          for (int i = 0; i < n; i++)
            nums1[i] = nums2[i];
      }
      int i = 0;
      int index1 = 0;
      int index2 = 0;
      while(index1 < m && index2 < n) {
        if (tmp[index1] < nums2[index2]) {
          nums1[i] = tmp[index1];
          index1++;
        }else {
          nums1[i] = nums2[index2];
          index2++;
        }
        i++;
      }
      if(index1 == m) {
        while(i < m+n) {
          nums1[i] = nums2[index2];
          i++;
          index2++;
        }
      }else{
        while(i < m+n) {
          nums1[i] = tmp[index1];
          i++;
          index1++;
        }
      }
    }
}

other's solution:
public void merge(int[] nums1, int m, int[] nums2, int n) {
    while(n>0){
        if(m>0&&nums1[m-1]>nums2[n-1]){
            nums1[m+n-1] = nums1[m-1];
            m--;
        }
        else{
            nums1[m+n-1] = nums2[n-1];
            n--;
        }
    }
}

TIps:
1. return value must compatible with return type
2. local variable

reverse;
