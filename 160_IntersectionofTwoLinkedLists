Write a program to find the node at which the intersection of two singly linked lists begins.


For example, the following two linked lists:

A:          a1 → a2
                   ↘
                     c1 → c2 → c3
                   ↗            
B:     b1 → b2 → b3
begin to intersect at node c1.


Notes:

If the two linked lists have no intersection at all, return null.
The linked lists must retain their original structure after the function returns.
You may assume there are no cycles anywhere in the entire linked structure.
Your code should preferably run in O(n) time and use only O(1) memory.


/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {
If we add list A to the end of B, and add B to the end of A, then if they have intersection, 
the intersection would located at the end of the combined list, and plus! they have the same index.
Awesome! To return the right ListNode, we cannot actually combine them, just "next" the end to another list. 
The first equal element is what we want to find.

public ListNode getIntersectionNode(ListNode headA, ListNode headB) {
    if(headA==null || headB==null)retur**n** null;

    ListNode a=headA;
    ListNode b=headB;
    while(a!=b){
        a=a==null?headB:a.next;
        b=b==null?headA:b.next;

    }return b;

}

Analysis:
if now same node, then a.next = b.next ==null

a a a a b b b b b null
b b b b b a a a a null
