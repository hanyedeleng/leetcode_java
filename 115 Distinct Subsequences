115 Distinct Subsequences
Given a string S and a string T, count the number of distinct subsequences of T in S.
A subsequence of a string is a new string which is formed from the original string by deleting 
some (can be none) of the characters without disturbing the relative positions of the remaining 
characters. (ie, "ACE" is a subsequence of "ABCDE" while "AEC" is not).}

Here is an example:
S = "rabbbit", T = "rabbit"
Return 3.

给定字符串S和T，S通过删除某些位置的字符得到T的话，就记作一种subSequence。返回总共有几种。
思路二：这样的题都是可以用动态规划解决的。

用dp[i][j]记录S的前i个和T的前j个的符合个数，那么最后目标就是dp[S.size()][T.size()];

初始化，j = 0 时候，dp[i][0] = 1，因为所有的都可以通过删除所有变成空字符，并且只有一种。
递推式子如下了：
i和j都从1开始，且j不能大于i，因为匹配的长度至少为1开始，j大于i无意义
如果 i == j  那么 dp[i][j] = S.substr(0, i) == T.substr(0, j);
如果 i != j 分两种情况

S[i-1] != T[j-1] 时，也就是加入不加入i的影响是一样的，那么 dp[i][j] = dp[i - 1][j];
S[i-1] == T[j-1] 时，那么当前字符可选择匹配或者是不匹配，所以dp[i][j] = dp[i - 1][j -1] + dp[i - 1][j];
/**
 * Solution (DP):
 * We keep a m*n matrix and scanning through string S, while
 * m = T.length() + 1 and n = S.length() + 1
 * and each cell in matrix Path[i][j] means the number of distinct subsequences of 
 * T.substr(1...i) in S(1...j)
 * 
 * Path[i][j] = Path[i][j-1]            (discard S[j])
 *              +     Path[i-1][j-1]    (S[j] == T[i] and we are going to use S[j])
 *                 or 0                 (S[j] != T[i] so we could not use S[j])
 * while Path[0][j] = 1 and Path[i][0] = 0.
 */
int numDistinct(string S, string T) {
    int m = T.length();
    int n = S.length();
    if (m > n) return 0;    // impossible for subsequence
    vector<vector<int>> path(m+1, vector<int>(n+1, 0));
    for (int k = 0; k <= n; k++) path[0][k] = 1;    // initialization

    for (int j = 1; j <= n; j++) {
        for (int i = 1; i <= m; i++) {
            path[i][j] = path[i][j-1] + (T[i-1] == S[j-1] ? path[i-1][j-1] : 0);
        }
    }

    return path[m][n];
}
